const posts = [
  {
    id: 1,
    title: "Java Socket c∆° b·∫£n",
    excerpt: "Gi·ªõi thi·ªáu kh√°i ni·ªám socket trong Java, v√≠ d·ª• t·∫°o ServerSocket v√† Socket client, g·ª≠i/nh·∫≠n chu·ªói ƒë∆°n gi·∫£n.",
    datetime: "2025-10-10T09:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
Socket l√† n·ªÅn t·∫£ng c·ªßa l·∫≠p tr√¨nh m·∫°ng trong Java. N√≥ cung c·∫•p c∆° ch·∫ø giao ti·∫øp hai chi·ªÅu gi·ªØa client v√† server th√¥ng qua TCP/IP. Trong b√†i n√†y, m√¨nh s·∫Ω h∆∞·ªõng d·∫´n c√°c b·∫°n x√¢y d·ª±ng m·ªôt h·ªá th·ªëng Echo ƒë∆°n gi·∫£n ƒë·ªÉ hi·ªÉu r√µ c√°ch Socket ho·∫°t ƒë·ªông.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu kh√°i ni·ªám Socket v√† ServerSocket trong Java
- T·∫°o server l·∫Øng nghe k·∫øt n·ªëi tr√™n m·ªôt c·ªïng c·ª• th·ªÉ
- X√¢y d·ª±ng client k·∫øt n·ªëi v√† trao ƒë·ªïi d·ªØ li·ªáu v·ªõi server
- X·ª≠ l√Ω lu·ªìng d·ªØ li·ªáu v√†o/ra (InputStream/OutputStream)

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: T·∫°o Server
Server s·∫Ω l·∫Øng nghe tr√™n c·ªïng 5000 v√† ch·ªù k·∫øt n·ªëi t·ª´ client:

\`\`\`java
import java.net.*;
import java.io.*;

public class EchoServer {
  public static void main(String[] args) {
    try {
      // B∆∞·ªõc 1: T·∫°o ServerSocket l·∫Øng nghe tr√™n c·ªïng 5000
      ServerSocket server = new ServerSocket(5000);
      System.out.println("Server ƒëang ch·ªù k·∫øt n·ªëi...");
      
      // B∆∞·ªõc 2: Ch·∫•p nh·∫≠n k·∫øt n·ªëi t·ª´ client
      Socket client = server.accept();
      System.out.println("Client ƒë√£ k·∫øt n·ªëi: " + client.getInetAddress());
      
      // B∆∞·ªõc 3: T·∫°o lu·ªìng ƒë·ªçc/ghi
      BufferedReader in = new BufferedReader(
        new InputStreamReader(client.getInputStream())
      );
      PrintWriter out = new PrintWriter(client.getOutputStream(), true);
      
      // B∆∞·ªõc 4: ƒê·ªçc d·ªØ li·ªáu v√† ph·∫£n h·ªìi
      String line = in.readLine();
      System.out.println("Server nh·∫≠n: " + line);
      out.println("Echo: " + line);
      
      // B∆∞·ªõc 5: ƒê√≥ng k·∫øt n·ªëi
      client.close();
      server.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
\`\`\`

### B∆∞·ªõc 2: T·∫°o Client
Client s·∫Ω k·∫øt n·ªëi t·ªõi server v√† g·ª≠i tin nh·∫Øn:

\`\`\`java
import java.net.*;
import java.io.*;

public class SimpleClient {
  public static void main(String[] args) {
    try {
      // B∆∞·ªõc 1: K·∫øt n·ªëi t·ªõi server
      Socket socket = new Socket("localhost", 5000);
      System.out.println("ƒê√£ k·∫øt n·ªëi t·ªõi server!");
      
      // B∆∞·ªõc 2: T·∫°o lu·ªìng ghi/ƒë·ªçc
      PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
      BufferedReader in = new BufferedReader(
        new InputStreamReader(socket.getInputStream())
      );
      
      // B∆∞·ªõc 3: G·ª≠i tin nh·∫Øn
      out.println("Hello Server");
      
      // B∆∞·ªõc 4: Nh·∫≠n ph·∫£n h·ªìi
      String response = in.readLine();
      System.out.println("Ph·∫£n h·ªìi t·ª´ server: " + response);
      
      // B∆∞·ªõc 5: ƒê√≥ng k·∫øt n·ªëi
      socket.close();
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
}
\`\`\`

### B∆∞·ªõc 3: Ch·∫°y th·ª≠ nghi·ªám
1. M·ªü 2 terminal/command prompt
2. Ch·∫°y Server tr∆∞·ªõc: \`java EchoServer\`
3. Ch·∫°y Client: \`java SimpleClient\`
4. Quan s√°t k·∫øt qu·∫£ tr√™n c·∫£ hai terminal

## üí° Ki·∫øn th·ª©c b·ªï sung
- **ServerSocket.accept()**: Ph∆∞∆°ng th·ª©c n√†y s·∫Ω block (ch·ªù) cho ƒë·∫øn khi c√≥ client k·∫øt n·ªëi
- **BufferedReader/PrintWriter**: Gi√∫p ƒë·ªçc/ghi d·ªØ li·ªáu vƒÉn b·∫£n d·ªÖ d√†ng h∆°n
- **Port number**: N√™n ch·ªçn port > 1024 ƒë·ªÉ tr√°nh xung ƒë·ªôt v·ªõi system ports

## üéì K·∫øt lu·∫≠n
Qua b√†i h·ªçc n√†y, b·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c:
- C√°ch t·∫°o server socket ƒë·ªÉ l·∫Øng nghe k·∫øt n·ªëi
- C√°ch client k·∫øt n·ªëi v√† trao ƒë·ªïi d·ªØ li·ªáu
- C∆° ch·∫ø blocking I/O trong Java Socket

**B√†i t·∫≠p th·ª±c h√†nh**: Th·ª≠ m·ªü r·ªông ch∆∞∆°ng tr√¨nh ƒë·ªÉ server c√≥ th·ªÉ x·ª≠ l√Ω nhi·ªÅu client c√πng l√∫c b·∫±ng c√°ch s·ª≠ d·ª•ng Thread ho·∫∑c ExecutorService. ƒê√¢y s·∫Ω l√† n·ªÅn t·∫£ng ƒë·ªÉ x√¢y d·ª±ng c√°c ·ª©ng d·ª•ng chat ho·∫∑c game server th·ª±c t·∫ø!`
  },
  {
    id: 2,
    title: "HTTP Request trong Java (HttpURLConnection & HttpClient)",
    excerpt: "So s√°nh c√°ch g·ª≠i HTTP request b·∫±ng HttpURLConnection v√† HttpClient, k√®m v√≠ d·ª• GET/POST.",
    datetime: "2025-10-12T14:30:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
Trong th·ª±c t·∫ø, vi·ªác g·ªçi REST API t·ª´ ·ª©ng d·ª•ng Java l√† r·∫•t ph·ªï bi·∫øn. Java cung c·∫•p hai c√°ch ch√≠nh: **HttpURLConnection** (c√≥ t·ª´ JDK 1.1) v√† **HttpClient** (t·ª´ Java 11+). B√†i n√†y s·∫Ω so s√°nh c·∫£ hai ph∆∞∆°ng ph√°p v√† gi√∫p b·∫°n ch·ªçn c√¥ng c·ª• ph√π h·ª£p.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu s·ª± kh√°c bi·ªát gi·ªØa HttpURLConnection v√† HttpClient
- G·ª≠i GET request ƒë·ªÉ l·∫•y d·ªØ li·ªáu
- G·ª≠i POST request v·ªõi JSON body
- X·ª≠ l√Ω response code v√† parse d·ªØ li·ªáu tr·∫£ v·ªÅ

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### Ph∆∞∆°ng ph√°p 1: HttpClient (Java 11+) - Khuy√™n d√πng

**∆Øu ƒëi·ªÉm**: API hi·ªán ƒë·∫°i, d·ªÖ ƒë·ªçc, h·ªó tr·ª£ async

\`\`\`java
import java.net.http.*;
import java.net.*;

public class HttpClientExample {
  public static void main(String[] args) throws Exception {
    // B∆∞·ªõc 1: T·∫°o HttpClient instance
    HttpClient client = HttpClient.newHttpClient();
    
    // B∆∞·ªõc 2: T·∫°o request GET
    HttpRequest request = HttpRequest.newBuilder()
      .uri(URI.create("https://jsonplaceholder.typicode.com/posts/1"))
      .header("Accept", "application/json")
      .GET()
      .build();
    
    // B∆∞·ªõc 3: G·ª≠i request v√† nh·∫≠n response
    HttpResponse<String> response = client.send(
      request, 
      HttpResponse.BodyHandlers.ofString()
    );
    
    // B∆∞·ªõc 4: X·ª≠ l√Ω response
    System.out.println("Status Code: " + response.statusCode());
    System.out.println("Response Body: " + response.body());
  }
}
\`\`\`

### Ph∆∞∆°ng ph√°p 2: HttpURLConnection - Ph∆∞∆°ng ph√°p c·ªï ƒëi·ªÉn

**∆Øu ƒëi·ªÉm**: C√≥ s·∫µn t·ª´ Java c≈©, kh√¥ng c·∫ßn dependency

\`\`\`java
import java.net.*;
import java.io.*;

public class HttpURLExample {
  public static void main(String[] args) throws Exception {
    // B∆∞·ªõc 1: T·∫°o URL v√† m·ªü connection
    URL url = new URL("https://jsonplaceholder.typicode.com/posts/1");
    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    
    // B∆∞·ªõc 2: C·∫•u h√¨nh request
    conn.setRequestMethod("GET");
    conn.setRequestProperty("Accept", "application/json");
    
    // B∆∞·ªõc 3: ƒê·ªçc response
    int statusCode = conn.getResponseCode();
    BufferedReader in = new BufferedReader(
      new InputStreamReader(conn.getInputStream())
    );
    
    String line;
    StringBuilder response = new StringBuilder();
    while ((line = in.readLine()) != null) {
      response.append(line);
    }
    in.close();
    
    System.out.println("Status: " + statusCode);
    System.out.println("Body: " + response.toString());
  }
}
\`\`\`

### G·ª≠i POST Request v·ªõi JSON

\`\`\`java
public static void postExample() throws Exception {
  HttpClient client = HttpClient.newHttpClient();
  
  // T·∫°o JSON body
  String jsonBody = """
    {
      "title": "B√†i vi·∫øt m·ªõi",
      "body": "N·ªôi dung b√†i vi·∫øt",
      "userId": 1
    }
  """;
  
  HttpRequest request = HttpRequest.newBuilder()
    .uri(URI.create("https://jsonplaceholder.typicode.com/posts"))
    .header("Content-Type", "application/json")
    .POST(HttpRequest.BodyPublishers.ofString(jsonBody))
    .build();
  
  HttpResponse<String> response = client.send(
    request, 
    HttpResponse.BodyHandlers.ofString()
  );
  
  System.out.println("Created: " + response.body());
}
\`\`\`

## üìä So s√°nh HttpClient vs HttpURLConnection

| Ti√™u ch√≠ | HttpClient | HttpURLConnection |
|----------|------------|-------------------|
| Java version | 11+ | 1.1+ |
| API design | Modern, fluent | C≈©, verbose |
| Async support | ‚úÖ C√≥ | ‚ùå Kh√¥ng |
| HTTP/2 | ‚úÖ C√≥ | ‚ùå Kh√¥ng |
| D·ªÖ s·ª≠ d·ª•ng | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê |

## üí° Tips & Best Practices
1. **Timeout**: Lu√¥n set timeout ƒë·ªÉ tr√°nh block v√¥ th·ªùi h·∫°n
2. **Connection pooling**: HttpClient t·ª± ƒë·ªông qu·∫£n l√Ω connection pool
3. **Error handling**: B·∫Øt IOException v√† ki·ªÉm tra status code
4. **Security**: V·ªõi HTTPS, validate certificate ƒë√∫ng c√°ch

## üéì K·∫øt lu·∫≠n
**Khuy·∫øn ngh·ªã**: N·∫øu d·ª± √°n c·ªßa b·∫°n d√πng Java 11+, h√£y ch·ªçn **HttpClient** v√¨ API hi·ªán ƒë·∫°i v√† d·ªÖ maintain h∆°n. Ch·ªâ d√πng HttpURLConnection khi b·∫Øt bu·ªôc support Java 8 tr·ªü xu·ªëng.

**B√†i t·∫≠p th·ª±c h√†nh**: T·∫°o m·ªôt class HTTPHelper v·ªõi c√°c method get(), post(), put(), delete() s·ª≠ d·ª•ng HttpClient, k√®m retry logic v√† logging ƒë·ªÉ t√°i s·ª≠ d·ª•ng trong c√°c d·ª± √°n th·ª±c t·∫ø.`
  },
  {
    id: 3,
    title: "REST API v·ªõi Spring Boot",
    excerpt: "X√¢y d·ª±ng RESTful API nh·ªè: Controller, Service, Repository, v√† c√°ch test b·∫±ng Postman.",
    datetime: "2025-10-14T10:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
Spring Boot l√† framework ph·ªï bi·∫øn nh·∫•t ƒë·ªÉ x√¢y d·ª±ng REST API trong Java. V·ªõi c∆° ch·∫ø auto-configuration v√† dependency injection m·∫°nh m·∫Ω, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt API ho√†n ch·ªânh ch·ªâ trong v√†i ph√∫t. B√†i n√†y s·∫Ω h∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ kh·ªüi t·∫°o project ƒë·∫øn test API.

## üéØ M·ª•c ti√™u h·ªçc
- T·∫°o Spring Boot project v·ªõi Spring Initializr
- Hi·ªÉu ki·∫øn tr√∫c 3 l·ªõp: Controller - Service - Repository
- X√¢y d·ª±ng CRUD operations cho REST API
- Test API v·ªõi Postman v√† curl

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: Kh·ªüi t·∫°o project
Truy c·∫≠p https://start.spring.io v√† ch·ªçn:
- **Project**: Maven
- **Language**: Java
- **Spring Boot**: 3.2.x
- **Dependencies**: Spring Web, Spring Data JPA, H2 Database

### B∆∞·ªõc 2: T·∫°o Entity

\`\`\`java
import jakarta.persistence.*;

@Entity
@Table(name = "posts")
public class Post {
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;
  
  @Column(nullable = false)
  private String title;
  
  @Column(length = 1000)
  private String content;
  
  // Constructors, Getters, Setters
  public Post() {}
  
  public Post(String title, String content) {
    this.title = title;
    this.content = content;
  }
  
  // ... getters/setters ...
}
\`\`\`

### B∆∞·ªõc 3: T·∫°o Repository

\`\`\`java
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PostRepository extends JpaRepository<Post, Long> {
  // Spring Data JPA t·ª± ƒë·ªông t·∫°o c√°c method:
  // findAll(), findById(), save(), deleteById(), etc.
}
\`\`\`

### B∆∞·ªõc 4: T·∫°o Service Layer

\`\`\`java
import org.springframework.stereotype.Service;
import java.util.List;

@Service
public class PostService {
  private final PostRepository repository;
  
  public PostService(PostRepository repository) {
    this.repository = repository;
  }
  
  public List<Post> listAll() {
    return repository.findAll();
  }
  
  public Post create(Post post) {
    return repository.save(post);
  }
  
  public Post getById(Long id) {
    return repository.findById(id)
      .orElseThrow(() -> new RuntimeException("Post not found"));
  }
  
  public void delete(Long id) {
    repository.deleteById(id);
  }
}
\`\`\`

### B∆∞·ªõc 5: T·∫°o Controller (API Endpoints)

\`\`\`java
import org.springframework.web.bind.annotation.*;
import org.springframework.http.*;
import java.util.List;

@RestController
@RequestMapping("/api/posts")
public class PostController {
  private final PostService service;
  
  public PostController(PostService service) {
    this.service = service;
  }
  
  // GET /api/posts - L·∫•y t·∫•t c·∫£ posts
  @GetMapping
  public List<Post> getAllPosts() {
    return service.listAll();
  }
  
  // GET /api/posts/{id} - L·∫•y post theo ID
  @GetMapping("/{id}")
  public ResponseEntity<Post> getPost(@PathVariable Long id) {
    Post post = service.getById(id);
    return ResponseEntity.ok(post);
  }
  
  // POST /api/posts - T·∫°o post m·ªõi
  @PostMapping
  public ResponseEntity<Post> createPost(@RequestBody Post post) {
    Post created = service.create(post);
    return ResponseEntity.status(HttpStatus.CREATED).body(created);
  }
  
  // DELETE /api/posts/{id} - X√≥a post
  @DeleteMapping("/{id}")
  public ResponseEntity<Void> deletePost(@PathVariable Long id) {
    service.delete(id);
    return ResponseEntity.noContent().build();
  }
}
\`\`\`

### B∆∞·ªõc 6: Test API v·ªõi curl

\`\`\`bash
# T·∫°o post m·ªõi
curl -X POST http://localhost:8080/api/posts \\
  -H "Content-Type: application/json" \\
  -d '{"title":"B√†i vi·∫øt ƒë·∫ßu ti√™n","content":"N·ªôi dung demo"}'

# L·∫•y t·∫•t c·∫£ posts
curl http://localhost:8080/api/posts

# L·∫•y post theo ID
curl http://localhost:8080/api/posts/1

# X√≥a post
curl -X DELETE http://localhost:8080/api/posts/1
\`\`\`

## üìä Ki·∫øn tr√∫c 3 l·ªõp

**Controller** ‚Üí **Service** ‚Üí **Repository** ‚Üí **Database**

- **Controller**: X·ª≠ l√Ω HTTP requests, validation, response
- **Service**: Business logic, transaction management
- **Repository**: Data access, query database

## üí° Tips & Best Practices
1. **Exception Handling**: T·∫°o @ControllerAdvice ƒë·ªÉ x·ª≠ l√Ω l·ªói global
2. **Validation**: D√πng @Valid v√† Bean Validation (@NotNull, @Size, etc.)
3. **DTO Pattern**: T√°ch Entity v√† DTO ƒë·ªÉ ki·ªÉm so√°t d·ªØ li·ªáu response
4. **Pagination**: D√πng Pageable cho list API khi c√≥ nhi·ªÅu d·ªØ li·ªáu
5. **API Documentation**: Th√™m Swagger/OpenAPI ƒë·ªÉ t·∫°o docs t·ª± ƒë·ªông

## üéì K·∫øt lu·∫≠n
B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c c√°ch x√¢y d·ª±ng m·ªôt REST API ho√†n ch·ªânh v·ªõi Spring Boot, t·ª´ thi·∫øt k·∫ø ki·∫øn tr√∫c ƒë·∫øn implementation v√† testing. ƒê√¢y l√† n·ªÅn t·∫£ng ƒë·ªÉ ph√°t tri·ªÉn c√°c ·ª©ng d·ª•ng backend ph·ª©c t·∫°p h∆°n.

**B√†i t·∫≠p n√¢ng cao**: 
1. Th√™m authentication v·ªõi Spring Security v√† JWT
2. Implement pagination v√† sorting cho GET /api/posts
3. Th√™m search API v·ªõi query parameters
4. Deploy l√™n cloud platform (Heroku, Railway, ho·∫∑c AWS)`
  },
  {
    id: 4,
    title: "Fetch API trong JavaScript",
    excerpt: "S·ª≠ d·ª•ng fetch ƒë·ªÉ g·ªçi REST API, x·ª≠ l√Ω JSON, v√† b·∫Øt l·ªói; v√≠ d·ª• th·ª±c t·∫ø v·ªõi async/await.",
    datetime: "2025-10-15T08:45:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
Fetch API l√† c√°ch hi·ªán ƒë·∫°i ƒë·ªÉ th·ª±c hi·ªán HTTP requests trong JavaScript, thay th·∫ø cho XMLHttpRequest c≈© k·ªπ. V·ªõi c√∫ ph√°p promise-based v√† async/await, code tr·ªü n√™n d·ªÖ ƒë·ªçc v√† maintain h∆°n r·∫•t nhi·ªÅu.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu c√°ch s·ª≠ d·ª•ng Fetch API v·ªõi Promise v√† async/await
- G·ª≠i GET/POST/PUT/DELETE requests
- X·ª≠ l√Ω JSON response v√† error handling
- √Åp d·ª•ng trong React component

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: GET Request c∆° b·∫£n

\`\`\`javascript
// C√°ch 1: D√πng .then()
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => console.log(data))
  .catch(error => console.error('Error:', error));

// C√°ch 2: D√πng async/await (khuy√™n d√πng)
async function getPost() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    const data = await response.json();
    console.log(data);
    return data;
  } catch (error) {
    console.error('Fetch error:', error);
  }
}
\`\`\`

### B∆∞·ªõc 2: POST Request v·ªõi JSON

\`\`\`javascript
async function createPost(postData) {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Th√™m token n·∫øu c·∫ßn authentication
        // 'Authorization': 'Bearer ' + token
      },
      body: JSON.stringify(postData)
    });
    
    if (!response.ok) {
      throw new Error(\`HTTP error! status: \${response.status}\`);
    }
    
    const data = await response.json();
    console.log('Post created:', data);
    return data;
  } catch (error) {
    console.error('Error creating post:', error);
    throw error;
  }
}

// S·ª≠ d·ª•ng
createPost({
  title: 'B√†i vi·∫øt m·ªõi',
  body: 'N·ªôi dung b√†i vi·∫øt',
  userId: 1
});
\`\`\`

### B∆∞·ªõc 3: T√≠ch h·ª£p v√†o React Component

\`\`\`javascript
import React, { useState, useEffect } from 'react';

function PostList() {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    fetchPosts();
  }, []);
  
  async function fetchPosts() {
    try {
      setLoading(true);
      const response = await fetch('https://jsonplaceholder.typicode.com/posts');
      
      if (!response.ok) {
        throw new Error('Failed to fetch posts');
      }
      
      const data = await response.json();
      setPosts(data.slice(0, 10)); // L·∫•y 10 posts ƒë·∫ßu
      setError(null);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }
  
  if (loading) return <div>Loading...</div>;
  if (error) return <div>Error: {error}</div>;
  
  return (
    <div>
      <h2>Posts</h2>
      {posts.map(post => (
        <div key={post.id}>
          <h3>{post.title}</h3>
          <p>{post.body}</p>
        </div>
      ))}
    </div>
  );
}
\`\`\`

### B∆∞·ªõc 4: T·∫°o API Helper reusable

\`\`\`javascript
// api.js - Helper functions
const API_BASE = 'https://jsonplaceholder.typicode.com';

async function apiRequest(endpoint, options = {}) {
  const url = \`\${API_BASE}\${endpoint}\`;
  const config = {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  };
  
  try {
    const response = await fetch(url, config);
    
    if (!response.ok) {
      throw new Error(\`API Error: \${response.status}\`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('API Request failed:', error);
    throw error;
  }
}

// C√°c helper methods
export const api = {
  get: (endpoint) => apiRequest(endpoint),
  
  post: (endpoint, data) => apiRequest(endpoint, {
    method: 'POST',
    body: JSON.stringify(data),
  }),
  
  put: (endpoint, data) => apiRequest(endpoint, {
    method: 'PUT',
    body: JSON.stringify(data),
  }),
  
  delete: (endpoint) => apiRequest(endpoint, {
    method: 'DELETE',
  }),
};

// S·ª≠ d·ª•ng
// import { api } from './api';
// const posts = await api.get('/posts');
// const newPost = await api.post('/posts', { title: 'Hi' });
\`\`\`

## üí° Tips & Best Practices

**1. Lu√¥n ki·ªÉm tra response.ok**
\`\`\`javascript
if (!response.ok) {
  throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);
}
\`\`\`

**2. Set timeout ƒë·ªÉ tr√°nh request treo**
\`\`\`javascript
const controller = new AbortController();
const timeoutId = setTimeout(() => controller.abort(), 5000);

fetch(url, { signal: controller.signal })
  .finally(() => clearTimeout(timeoutId));
\`\`\`

**3. X·ª≠ l√Ω loading v√† error states**
- Hi·ªÉn th·ªã loading spinner khi ƒëang fetch
- Hi·ªÉn th·ªã error message khi fail
- Cho ph√©p retry khi l·ªói

**4. Cache data khi c·∫ßn**
- D√πng React Query ho·∫∑c SWR cho data fetching advanced
- Implement cache trong localStorage cho offline support

## üéì K·∫øt lu·∫≠n
Fetch API l√† c√¥ng c·ª• m·∫°nh m·∫Ω v√† ƒë∆°n gi·∫£n ƒë·ªÉ g·ªçi REST API trong JavaScript. K·∫øt h·ª£p v·ªõi async/await, b·∫°n c√≥ th·ªÉ vi·∫øt code async r√µ r√†ng v√† d·ªÖ maintain.

**Key takeaways**:
- Lu√¥n d√πng async/await thay v√¨ .then() chains
- X·ª≠ l√Ω errors ƒë√∫ng c√°ch v·ªõi try/catch
- T·∫°o helper functions ƒë·ªÉ t√°i s·ª≠ d·ª•ng
- Qu·∫£n l√Ω loading/error states trong UI

**B√†i t·∫≠p th·ª±c h√†nh**: X√¢y d·ª±ng m·ªôt CRUD app ho√†n ch·ªânh v·ªõi React + Fetch API, c√≥ form validation, optimistic updates, v√† error recovery.`
  },
  {
    id: 5,
    title: "WebSocket trong JS: Chat th·ªùi gian th·ª±c",
    excerpt: "Tri·ªÉn khai client WebSocket ƒë∆°n gi·∫£n, g·ª≠i/nh·∫≠n tin nh·∫Øn v√† x·ª≠ l√Ω reconnect.",
    datetime: "2025-10-16T11:20:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
WebSocket cung c·∫•p k·∫øt n·ªëi hai chi·ªÅu (bidirectional) gi·ªØa client v√† server, cho ph√©p truy·ªÅn d·ªØ li·ªáu real-time m√† kh√¥ng c·∫ßn polling. Ho√†n h·∫£o cho chat apps, live notifications, multiplayer games, v√† trading platforms.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu s·ª± kh√°c bi·ªát gi·ªØa WebSocket v√† HTTP
- T·∫°o WebSocket client trong tr√¨nh duy·ªát
- X√¢y d·ª±ng WebSocket server v·ªõi Node.js
- Implement reconnect logic v√† heartbeat

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: T·∫°o WebSocket Server (Node.js)

\`\`\`javascript
// server.js
const WebSocket = require('ws');
const server = new WebSocket.Server({ port: 8080 });

// L∆∞u danh s√°ch clients
const clients = new Set();

server.on('connection', (ws) => {
  console.log('Client connected');
  clients.add(ws);
  
  // G·ª≠i welcome message
  ws.send(JSON.stringify({
    type: 'system',
    message: 'Welcome to chat!'
  }));
  
  // Nh·∫≠n message t·ª´ client
  ws.on('message', (data) => {
    console.log('Received:', data.toString());
    
    const message = JSON.parse(data.toString());
    
    // Broadcast t·ªõi t·∫•t c·∫£ clients
    clients.forEach(client => {
      if (client.readyState === WebSocket.OPEN) {
        client.send(JSON.stringify({
          type: 'message',
          user: message.user,
          text: message.text,
          timestamp: new Date().toISOString()
        }));
      }
    });
  });
  
  // X·ª≠ l√Ω disconnect
  ws.on('close', () => {
    console.log('Client disconnected');
    clients.delete(ws);
  });
  
  ws.on('error', (error) => {
    console.error('WebSocket error:', error);
  });
});

console.log('WebSocket server running on ws://localhost:8080');
\`\`\`

### B∆∞·ªõc 2: T·∫°o WebSocket Client (Browser)

\`\`\`javascript
class ChatClient {
  constructor(url) {
    this.url = url;
    this.ws = null;
    this.reconnectInterval = 5000;
    this.connect();
  }
  
  connect() {
    this.ws = new WebSocket(this.url);
    
    this.ws.addEventListener('open', () => {
      console.log('Connected to server');
      this.onOpen();
    });
    
    this.ws.addEventListener('message', (event) => {
      const data = JSON.parse(event.data);
      this.onMessage(data);
    });
    
    this.ws.addEventListener('close', () => {
      console.log('Disconnected from server');
      this.onClose();
      // Auto reconnect
      setTimeout(() => this.connect(), this.reconnectInterval);
    });
    
    this.ws.addEventListener('error', (error) => {
      console.error('WebSocket error:', error);
      this.onError(error);
    });
  }
  
  send(data) {
    if (this.ws.readyState === WebSocket.OPEN) {
      this.ws.send(JSON.stringify(data));
    } else {
      console.error('WebSocket is not connected');
    }
  }
  
  disconnect() {
    if (this.ws) {
      this.ws.close();
    }
  }
  
  // Callback methods (override when using)
  onOpen() {}
  onMessage(data) {}
  onClose() {}
  onError(error) {}
}

// S·ª≠ d·ª•ng
const chat = new ChatClient('ws://localhost:8080');

chat.onOpen = () => {
  console.log('Chat connected!');
};

chat.onMessage = (data) => {
  console.log('New message:', data);
  // Update UI
  displayMessage(data);
};

// G·ª≠i message
function sendMessage() {
  const input = document.getElementById('messageInput');
  chat.send({
    user: 'User123',
    text: input.value
  });
  input.value = '';
}
\`\`\`

### B∆∞·ªõc 3: React Component v·ªõi WebSocket

\`\`\`javascript
import React, { useState, useEffect, useRef } from 'react';

function ChatApp() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [connected, setConnected] = useState(false);
  const ws = useRef(null);
  
  useEffect(() => {
    // K·∫øt n·ªëi WebSocket
    ws.current = new WebSocket('ws://localhost:8080');
    
    ws.current.onopen = () => {
      setConnected(true);
      console.log('Connected');
    };
    
    ws.current.onmessage = (event) => {
      const data = JSON.parse(event.data);
      setMessages(prev => [...prev, data]);
    };
    
    ws.current.onclose = () => {
      setConnected(false);
      console.log('Disconnected');
    };
    
    // Cleanup khi unmount
    return () => {
      ws.current?.close();
    };
  }, []);
  
  const sendMessage = () => {
    if (input.trim() && ws.current?.readyState === WebSocket.OPEN) {
      ws.current.send(JSON.stringify({
        user: 'Me',
        text: input
      }));
      setInput('');
    }
  };
  
  return (
    <div className="chat-container">
      <div className="status">
        {connected ? 'üü¢ Connected' : 'üî¥ Disconnected'}
      </div>
      
      <div className="messages">
        {messages.map((msg, i) => (
          <div key={i} className="message">
            <strong>{msg.user}:</strong> {msg.text}
          </div>
        ))}
      </div>
      
      <div className="input-area">
        <input
          value={input}
          onChange={e => setInput(e.target.value)}
          onKeyPress={e => e.key === 'Enter' && sendMessage()}
          placeholder="Type a message..."
        />
        <button onClick={sendMessage}>Send</button>
      </div>
    </div>
  );
}
\`\`\`

## üí° Tips & Best Practices

**1. Heartbeat/Ping-Pong** ƒë·ªÉ detect broken connections:
\`\`\`javascript
setInterval(() => {
  if (ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify({ type: 'ping' }));
  }
}, 30000); // Ping m·ªói 30 gi√¢y
\`\`\`

**2. Reconnect with exponential backoff**:
\`\`\`javascript
let reconnectDelay = 1000;
function reconnect() {
  setTimeout(() => {
    connect();
    reconnectDelay = Math.min(reconnectDelay * 2, 30000);
  }, reconnectDelay);
}
\`\`\`

**3. Buffer messages khi offline**:
- L∆∞u messages v√†o queue khi disconnected
- G·ª≠i l·∫°i khi reconnect th√†nh c√¥ng

## üéì K·∫øt lu·∫≠n
WebSocket l√† c√¥ng ngh·ªá thi·∫øt y·∫øu cho real-time applications. B·∫°n ƒë√£ h·ªçc ƒë∆∞·ª£c c√°ch t·∫°o client/server, x·ª≠ l√Ω lifecycle events, v√† implement reconnection logic.

**So s√°nh WebSocket vs HTTP**:
- **HTTP**: Request-response, stateless, polling overhead
- **WebSocket**: Persistent connection, bidirectional, low latency

**B√†i t·∫≠p th·ª±c h√†nh**: 
1. Th√™m typing indicator ("User is typing...")
2. Implement private messages gi·ªØa 2 users
3. Th√™m file sharing qua WebSocket
4. Deploy server l√™n Heroku/Railway v√† test v·ªõi production URL`
  },
  {
    id: 6,
    title: "So s√°nh Java & JavaScript trong m·∫°ng",
    excerpt: "ƒêi·ªÉm m·∫°nh/ƒëi·ªÉm y·∫øu khi l√†m network programming: thread vs event loop, th∆∞ vi·ªán ph·ªï bi·∫øn.",
    datetime: "2025-10-17T09:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
Java v√† JavaScript l√† hai ng√¥n ng·ªØ ph·ªï bi·∫øn trong l·∫≠p tr√¨nh m·∫°ng, nh∆∞ng ch√∫ng c√≥ c√°ch ti·∫øp c·∫≠n ho√†n to√†n kh√°c nhau. Hi·ªÉu r√µ s·ª± kh√°c bi·ªát gi√∫p b·∫°n ch·ªçn c√¥ng ngh·ªá ph√π h·ª£p cho d·ª± √°n.

## üéØ M·ª•c ti√™u h·ªçc
- So s√°nh m√¥ h√¨nh x·ª≠ l√Ω: Multi-threading vs Event Loop
- Hi·ªÉu performance characteristics c·ªßa m·ªói ng√¥n ng·ªØ
- Ch·ªçn c√¥ng ngh·ªá ph√π h·ª£p cho t·ª´ng use case
- N·∫Øm c√°c th∆∞ vi·ªán network ph·ªï bi·∫øn

## üîß So s√°nh chi ti·∫øt

### M√¥ h√¨nh x·ª≠ l√Ω

**Java - Multi-threading**
\`\`\`java
// Java x·ª≠ l√Ω m·ªói connection trong thread ri√™ng
ServerSocket server = new ServerSocket(8080);
ExecutorService executor = Executors.newFixedThreadPool(100);

while (true) {
  Socket client = server.accept();
  executor.submit(() -> {
    // X·ª≠ l√Ω client trong thread ri√™ng
    handleClient(client);
  });
}
\`\`\`

**JavaScript - Event Loop (Single Thread)**
\`\`\`javascript
// JavaScript x·ª≠ l√Ω t·∫•t c·∫£ connections trong 1 thread
const server = http.createServer((req, res) => {
  // Non-blocking I/O
  fs.readFile('data.json', (err, data) => {
    res.end(data);
  });
});

server.listen(8080);
\`\`\`

### X·ª≠ l√Ω JSON

**Java (Jackson)**
\`\`\`java
ObjectMapper mapper = new ObjectMapper();

// Serialize
String json = mapper.writeValueAsString(user);

// Deserialize
User user = mapper.readValue(json, User.class);
\`\`\`

**JavaScript (Native)**
\`\`\`javascript
// Serialize
const json = JSON.stringify(user);

// Deserialize
const user = JSON.parse(json);
\`\`\`

### Async Operations

**Java (CompletableFuture)**
\`\`\`java
CompletableFuture.supplyAsync(() -> fetchData())
  .thenApply(data -> processData(data))
  .thenAccept(result -> System.out.println(result))
  .exceptionally(ex -> {
    System.err.println(ex);
    return null;
  });
\`\`\`

**JavaScript (async/await)**
\`\`\`javascript
async function processData() {
  try {
    const data = await fetchData();
    const result = await process(data);
    console.log(result);
  } catch (error) {
    console.error(error);
  }
}
\`\`\`

## üìä B·∫£ng so s√°nh

| Ti√™u ch√≠ | Java | JavaScript |
|----------|------|------------|
| **M√¥ h√¨nh** | Multi-threading | Event Loop (Single thread) |
| **I/O** | Blocking (m·∫∑c ƒë·ªãnh) | Non-blocking |
| **Concurrency** | Thread-based | Callback/Promise-based |
| **Performance** | High throughput | High concurrency |
| **CPU-intensive** | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê |
| **I/O-intensive** | ‚≠ê‚≠ê‚≠ê‚≠ê | ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê |
| **Type safety** | Static typing | Dynamic typing |
| **Learning curve** | Steep | Moderate |

## üõ†Ô∏è Th∆∞ vi·ªán ph·ªï bi·∫øn

### Java
- **Netty**: High-performance network framework
- **OkHttp**: Modern HTTP client
- **Apache HttpComponents**: HTTP library m·∫°nh m·∫Ω
- **Spring WebFlux**: Reactive web framework

### JavaScript
- **axios**: Promise-based HTTP client
- **socket.io**: Real-time bidirectional communication
- **ws**: WebSocket library cho Node.js
- **node-fetch**: Fetch API cho Node.js

## üí° Khi n√†o d√πng g√¨?

### Ch·ªçn Java khi:
- H·ªá th·ªëng enterprise l·ªõn, c·∫ßn scale vertically
- CPU-intensive tasks (data processing, encoding)
- C·∫ßn type safety v√† compile-time checking
- Team ƒë√£ quen v·ªõi Java ecosystem

### Ch·ªçn JavaScript khi:
- Real-time applications (chat, notifications)
- High concurrency v·ªõi I/O-intensive
- Rapid prototyping v√† development
- Fullstack v·ªõi c√πng m·ªôt ng√¥n ng·ªØ (MERN/MEAN stack)

## üéì K·∫øt lu·∫≠n
Kh√¥ng c√≥ ng√¥n ng·ªØ n√†o "t·ªët h∆°n" - ch·ªâ c√≥ ph√π h·ª£p h∆°n cho t·ª´ng use case. Java m·∫°nh v·ªÅ performance v√† type safety, JavaScript m·∫°nh v·ªÅ developer experience v√† real-time capabilities.

**Key takeaways**:
- Java: Threading model, blocking I/O (c√≥ th·ªÉ d√πng NIO/Netty cho non-blocking)
- JavaScript: Event loop, non-blocking I/O by default
- C·∫£ hai ƒë·ªÅu c√≥ th·ªÉ x√¢y d·ª±ng high-performance network applications

**B√†i t·∫≠p**: Th·ª≠ implement c√πng m·ªôt API (REST + WebSocket) b·∫±ng c·∫£ Java (Spring Boot) v√† JavaScript (Express + Socket.io), so s√°nh performance v√† developer experience.`
  },
  {
    id: 7,
    title: "JSON v√† truy·ªÅn d·ªØ li·ªáu trong l·∫≠p tr√¨nh m·∫°ng",
    excerpt: "C√°ch serialize/deserialize JSON trong Java v√† JS, ƒë·ªãnh d·∫°ng h·ª£p l·ªá, v√† th·ªß thu·∫≠t an to√†n.",
    datetime: "2025-10-18T15:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
JSON (JavaScript Object Notation) l√† ƒë·ªãnh d·∫°ng d·ªØ li·ªáu ph·ªï bi·∫øn nh·∫•t trong web development v√† API communication. B√†i n√†y s·∫Ω h∆∞·ªõng d·∫´n c√°ch x·ª≠ l√Ω JSON an to√†n v√† hi·ªáu qu·∫£ trong c·∫£ Java v√† JavaScript.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu c·∫•u tr√∫c v√† syntax c·ªßa JSON
- Serialize/Deserialize trong Java v√† JavaScript
- Validate v√† sanitize JSON data
- Best practices v·ªÅ security v√† performance

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### C·∫•u tr√∫c JSON c∆° b·∫£n

\`\`\`json
{
  "id": 1,
  "name": "Nguy·ªÖn VƒÉn A",
  "email": "a@example.com",
  "active": true,
  "roles": ["user", "admin"],
  "profile": {
    "age": 25,
    "city": "H√† N·ªôi"
  },
  "createdAt": "2025-10-18T10:00:00Z"
}
\`\`\`

### Java - S·ª≠ d·ª•ng Jackson

**B∆∞·ªõc 1: Th√™m dependency (Maven)**
\`\`\`xml
<dependency>
  <groupId>com.fasterxml.jackson.core</groupId>
  <artifactId>jackson-databind</artifactId>
  <version>2.15.2</version>
</dependency>
\`\`\`

**B∆∞·ªõc 2: T·∫°o POJO class**
\`\`\`java
import com.fasterxml.jackson.annotation.*;
import java.time.Instant;
import java.util.List;

public class User {
  private Long id;
  private String name;
  private String email;
  private boolean active;
  private List<String> roles;
  private Profile profile;
  
  @JsonFormat(pattern = "yyyy-MM-dd'T'HH:mm:ss'Z'")
  private Instant createdAt;
  
  // Constructors, getters, setters
  
  public static class Profile {
    private int age;
    private String city;
    // getters, setters
  }
}
\`\`\`

**B∆∞·ªõc 3: Serialize/Deserialize**
\`\`\`java
import com.fasterxml.jackson.databind.ObjectMapper;

public class JsonExample {
  public static void main(String[] args) throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    
    // Deserialize: JSON string -> Object
    String json = "{\\"id\\":1,\\"name\\":\\"Test\\"}";
    User user = mapper.readValue(json, User.class);
    
    // Serialize: Object -> JSON string
    String output = mapper.writeValueAsString(user);
    System.out.println(output);
    
    // Pretty print
    String prettyJson = mapper
      .writerWithDefaultPrettyPrinter()
      .writeValueAsString(user);
    System.out.println(prettyJson);
  }
}
\`\`\`

### JavaScript - Native JSON API

**Parse (Deserialize)**
\`\`\`javascript
const jsonString = '{"id":1,"name":"Test"}';

try {
  const user = JSON.parse(jsonString);
  console.log(user.name); // "Test"
} catch (error) {
  console.error('Invalid JSON:', error);
}
\`\`\`

**Stringify (Serialize)**
\`\`\`javascript
const user = {
  id: 1,
  name: "Test",
  email: "test@example.com"
};

// Basic stringify
const json = JSON.stringify(user);

// Pretty print v·ªõi indent
const prettyJson = JSON.stringify(user, null, 2);

// Selective serialization
const filtered = JSON.stringify(user, ['id', 'name']);
\`\`\`

### X·ª≠ l√Ω nested objects v√† arrays

\`\`\`javascript
const data = {
  users: [
    { id: 1, name: "User 1" },
    { id: 2, name: "User 2" }
  ],
  metadata: {
    total: 2,
    page: 1
  }
};

// Serialize
const json = JSON.stringify(data);

// Deserialize v√† truy c·∫≠p
const parsed = JSON.parse(json);
console.log(parsed.users[0].name); // "User 1"
console.log(parsed.metadata.total); // 2
\`\`\`

## üîí Security Best Practices

### 1. Validate input tr∆∞·ªõc khi parse

\`\`\`javascript
function safeJsonParse(str) {
  try {
    // Ki·ªÉm tra basic format
    if (typeof str !== 'string') {
      throw new Error('Input must be string');
    }
    
    // Parse
    const obj = JSON.parse(str);
    
    // Validate structure
    if (!obj || typeof obj !== 'object') {
      throw new Error('Invalid JSON structure');
    }
    
    return obj;
  } catch (error) {
    console.error('JSON parse error:', error);
    return null;
  }
}
\`\`\`

### 2. Tr√°nh injection attacks

\`\`\`javascript
// ‚ùå NGUY HI·ªÇM - Kh√¥ng bao gi·ªù l√†m th·∫ø n√†y!
const userInput = '{"name":"<script>alert(\\'XSS\\')</script>"}';
eval('const data = ' + userInput); // NEVER USE EVAL!

// ‚úÖ ƒê√öNG - Lu√¥n d√πng JSON.parse
const data = JSON.parse(userInput);
// Sau ƒë√≥ sanitize output khi hi·ªÉn th·ªã
\`\`\`

### 3. Handle large JSON files

\`\`\`java
// Java - Stream large JSON
JsonParser parser = factory.createParser(new File("large.json"));
while (parser.nextToken() != null) {
  // Process incrementally
}
\`\`\`

## üí° Tips & Tricks

### Custom serialization (JavaScript)

\`\`\`javascript
const user = {
  name: "Test",
  password: "secret123",
  toJSON() {
    // Exclude password khi serialize
    return {
      name: this.name
    };
  }
};

JSON.stringify(user); // {"name":"Test"}
\`\`\`

### Date handling

\`\`\`javascript
// Serialize date
const data = {
  createdAt: new Date()
};
const json = JSON.stringify(data);
// {"createdAt":"2025-10-18T10:00:00.000Z"}

// Deserialize date v·ªõi custom reviver
const parsed = JSON.parse(json, (key, value) => {
  if (key === 'createdAt') {
    return new Date(value);
  }
  return value;
});
\`\`\`

## üéì K·∫øt lu·∫≠n
JSON l√† backbone c·ªßa modern web APIs. Vi·ªác x·ª≠ l√Ω JSON ƒë√∫ng c√°ch kh√¥ng ch·ªâ ƒë·∫£m b·∫£o app ho·∫°t ƒë·ªông m√† c√≤n b·∫£o v·ªá kh·ªèi security vulnerabilities.

**Key takeaways**:
- Lu√¥n validate v√† sanitize JSON input
- Kh√¥ng bao gi·ªù d√πng eval() ƒë·ªÉ parse JSON
- Handle errors gracefully v·ªõi try/catch
- C·∫©n th·∫≠n v·ªõi circular references v√† date serialization

**B√†i t·∫≠p th·ª±c h√†nh**: T·∫°o m·ªôt API gateway validate t·∫•t c·∫£ JSON requests, log invalid attempts, v√† implement rate limiting d·ª±a tr√™n request structure.`
  },
  {
    id: 8,
    title: "MQTT cho IoT: T·ª´ l√Ω thuy·∫øt t·ªõi demo",
    excerpt: "Gi·ªõi thi·ªáu MQTT, thi·∫øt l·∫≠p Mosquitto broker, publish/subscribe b·∫±ng Python/JS.",
    datetime: "2025-10-19T10:30:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
MQTT (Message Queuing Telemetry Transport) l√† protocol nh·∫π, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho IoT devices v·ªõi bƒÉng th√¥ng th·∫•p v√† k·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh. N√≥ ho√†n h·∫£o cho smart home, sensors, v√† industrial IoT.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu ki·∫øn tr√∫c MQTT: Broker, Publisher, Subscriber
- N·∫Øm kh√°i ni·ªám Topic, QoS, Retained Messages
- C√†i ƒë·∫∑t v√† c·∫•u h√¨nh Mosquitto broker
- Implement client v·ªõi Python v√† JavaScript

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: C√†i ƒë·∫∑t Mosquitto Broker

**Windows:**
\`\`\`bash
# Download t·ª´: https://mosquitto.org/download/
# Sau khi c√†i, ch·∫°y service
net start mosquitto
\`\`\`

**Linux/Mac:**
\`\`\`bash
# Ubuntu/Debian
sudo apt-get install mosquitto mosquitto-clients

# macOS
brew install mosquitto

# Start service
mosquitto -v
\`\`\`

### B∆∞·ªõc 2: Test v·ªõi Command Line

\`\`\`bash
# Terminal 1: Subscribe to topic
mosquitto_sub -h localhost -t sensors/temperature

# Terminal 2: Publish message
mosquitto_pub -h localhost -t sensors/temperature -m "25.5"
\`\`\`

### B∆∞·ªõc 3: Python Client (paho-mqtt)

**C√†i ƒë·∫∑t**
\`\`\`bash
pip install paho-mqtt
\`\`\`

**Publisher (g·ª≠i d·ªØ li·ªáu sensor)**
\`\`\`python
import paho.mqtt.client as mqtt
import time
import random

# Callback khi connect th√†nh c√¥ng
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT Broker!")
    else:
        print(f"Failed to connect, return code {rc}")

# T·∫°o client
client = mqtt.Client("TemperatureSensor")
client.on_connect = on_connect

# Connect t·ªõi broker
client.connect("localhost", 1883, 60)
client.loop_start()

# Publish data m·ªói 5 gi√¢y
try:
    while True:
        temperature = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(40.0, 60.0), 2)
        
        # Publish v·ªõi QoS 1
        client.publish("sensors/temperature", temperature, qos=1)
        client.publish("sensors/humidity", humidity, qos=1)
        
        print(f"Published: Temp={temperature}¬∞C, Humidity={humidity}%")
        time.sleep(5)
except KeyboardInterrupt:
    client.loop_stop()
    client.disconnect()
\`\`\`

**Subscriber (nh·∫≠n d·ªØ li·ªáu)**
\`\`\`python
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    # Subscribe khi connect th√†nh c√¥ng
    client.subscribe("sensors/#")  # # = wildcard, nh·∫≠n t·∫•t c·∫£ subtopics

def on_message(client, userdata, msg):
    print(f"Topic: {msg.topic}")
    print(f"Message: {msg.payload.decode()}")
    print(f"QoS: {msg.qos}")
    print("---")

client = mqtt.Client("DataLogger")
client.on_connect = on_connect
client.on_message = on_message

client.connect("localhost", 1883, 60)

# Blocking call - ch·∫°y forever
client.loop_forever()
\`\`\`

### B∆∞·ªõc 4: JavaScript/Node.js Client

**C√†i ƒë·∫∑t**
\`\`\`bash
npm install mqtt
\`\`\`

**Publisher & Subscriber**
\`\`\`javascript
const mqtt = require('mqtt');

// Connect t·ªõi broker
const client = mqtt.connect('mqtt://localhost:1883', {
  clientId: 'WebClient',
  clean: true,
  connectTimeout: 4000
});

client.on('connect', () => {
  console.log('Connected to MQTT broker');
  
  // Subscribe topics
  client.subscribe('sensors/#', (err) => {
    if (!err) {
      console.log('Subscribed to sensors/*');
    }
  });
  
  // Publish test message
  setInterval(() => {
    const temp = (Math.random() * 10 + 20).toFixed(2);
    client.publish('sensors/temperature', temp, { qos: 1 });
    console.log(\`Published: \${temp}¬∞C\`);
  }, 10000);
});

client.on('message', (topic, message) => {
  console.log(\`[\${topic}] \${message.toString()}\`);
  
  // Parse v√† x·ª≠ l√Ω data
  if (topic === 'sensors/temperature') {
    const temp = parseFloat(message.toString());
    if (temp > 28) {
      console.log('‚ö†Ô∏è Temperature alert!');
    }
  }
});

client.on('error', (error) => {
  console.error('Connection error:', error);
});
\`\`\`

### B∆∞·ªõc 5: MQTT over WebSocket (Browser)

\`\`\`javascript
// S·ª≠ d·ª•ng CDN ho·∫∑c bundle v·ªõi webpack
// <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>

const client = mqtt.connect('ws://localhost:8080', {
  clientId: 'BrowserClient_' + Math.random().toString(16).substr(2, 8)
});

client.on('connect', () => {
  console.log('Connected via WebSocket');
  client.subscribe('sensors/temperature');
});

client.on('message', (topic, message) => {
  // Update UI
  document.getElementById('temperature').textContent = message.toString();
});
\`\`\`

## üìä MQTT Concepts

### QoS (Quality of Service) Levels

| QoS | T√™n | M√¥ t·∫£ | Use case |
|-----|-----|-------|----------|
| 0 | At most once | Fire and forget | Logging, non-critical data |
| 1 | At least once | Acknowledged delivery | Most common, sensor data |
| 2 | Exactly once | Guaranteed delivery | Financial, critical commands |

### Topic Structure
\`\`\`
home/livingroom/temperature
home/bedroom/humidity
factory/machine1/status
factory/machine1/alerts
\`\`\`

**Wildcards:**
- \`+\`: Single level wildcard (\`sensors/+/temperature\`)
- \`#\`: Multi level wildcard (\`sensors/#\`)

## üí° Best Practices

**1. Topic naming convention**
- D√πng lowercase
- Ph√¢n c·∫•p r√µ r√†ng: location/device/measurement
- Tr√°nh spaces v√† k√Ω t·ª± ƒë·∫∑c bi·ªát

**2. Security**
\`\`\`bash
# C·∫•u h√¨nh authentication trong mosquitto.conf
allow_anonymous false
password_file /etc/mosquitto/passwd

# T·∫°o user
mosquitto_passwd -c /etc/mosquitto/passwd username
\`\`\`

**3. Retained messages cho tr·∫°ng th√°i**
\`\`\`python
# Publish v·ªõi retained=True
client.publish("device/status", "online", retain=True)
# Client m·ªõi subscribe s·∫Ω nh·∫≠n ƒë∆∞·ª£c message n√†y ngay l·∫≠p t·ª©c
\`\`\`

## üéì K·∫øt lu·∫≠n
MQTT l√† protocol ho√†n h·∫£o cho IoT v·ªõi bandwidth th·∫•p, battery-powered devices, v√† unreliable networks. Mosquitto broker d·ªÖ setup v√† paho client libraries h·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng.

**Key features**:
- Lightweight protocol, minimal overhead
- Publish/Subscribe pattern (decoupling)
- QoS levels cho reliability
- Retained messages v√† Last Will & Testament

**B√†i t·∫≠p th·ª±c h√†nh**:
1. X√¢y d·ª±ng h·ªá th·ªëng gi√°m s√°t nhi·ªát ƒë·ªô ph√≤ng v·ªõi ESP8266/Arduino
2. T·∫°o dashboard web realtime hi·ªÉn th·ªã sensor data
3. Implement alerting system khi gi√° tr·ªã v∆∞·ª£t ng∆∞·ª°ng
4. Deploy MQTT broker l√™n cloud (CloudMQTT, HiveMQ)`
  },
  {
    id: 9,
    title: "·ª®ng d·ª•ng th·ª±c t·∫ø: Gi√°m s√°t c·∫£m bi·∫øn qua WebSocket",
    excerpt: "Case study: thu th·∫≠p d·ªØ li·ªáu c·∫£m bi·∫øn, stream qua WebSocket v√† hi·ªÉn th·ªã dashboard.",
    datetime: "2025-10-20T13:10:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
B√†i n√†y l√† case study th·ª±c t·∫ø v·ªÅ vi·ªác x√¢y d·ª±ng h·ªá th·ªëng gi√°m s√°t c·∫£m bi·∫øn realtime, t·ª´ hardware ƒë·∫øn dashboard web. B·∫°n s·∫Ω h·ªçc c√°ch thi·∫øt k·∫ø ki·∫øn tr√∫c, x·ª≠ l√Ω data streaming, v√† visualization.

## üéØ M·ª•c ti√™u h·ªçc
- Thi·∫øt k·∫ø ki·∫øn tr√∫c IoT end-to-end
- Thu th·∫≠p v√† stream data t·ª´ sensors
- X·ª≠ l√Ω data pipeline v·ªõi WebSocket
- Hi·ªÉn th·ªã realtime dashboard v·ªõi charts

## üèóÔ∏è Ki·∫øn tr√∫c h·ªá th·ªëng

\`\`\`
[Sensors] ‚Üí [Gateway/MCU] ‚Üí [WebSocket Server] ‚Üí [Web Dashboard]
                              ‚Üì
                         [Database] (logging)
\`\`\`

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: Sensor Data Generator (gi·∫£ l·∫≠p)

\`\`\`javascript
// sensor-simulator.js
const WebSocket = require('ws');

class SensorSimulator {
  constructor(wsUrl) {
    this.ws = new WebSocket(wsUrl);
    this.sensors = [
      { id: 'TEMP_01', type: 'temperature', min: 20, max: 30 },
      { id: 'HUM_01', type: 'humidity', min: 40, max: 70 },
      { id: 'PRES_01', type: 'pressure', min: 990, max: 1020 }
    ];
  }
  
  start() {
    this.ws.on('open', () => {
      console.log('Connected to server');
      this.sendData();
    });
  }
  
  sendData() {
    setInterval(() => {
      this.sensors.forEach(sensor => {
        const value = this.generateValue(sensor.min, sensor.max);
        const data = {
          sensorId: sensor.id,
          type: sensor.type,
          value: value,
          unit: this.getUnit(sensor.type),
          timestamp: new Date().toISOString()
        };
        
        this.ws.send(JSON.stringify(data));
        console.log(\`Sent: \${sensor.id} = \${value}\`);
      });
    }, 2000); // M·ªói 2 gi√¢y
  }
  
  generateValue(min, max) {
    return (Math.random() * (max - min) + min).toFixed(2);
  }
  
  getUnit(type) {
    const units = {
      temperature: '¬∞C',
      humidity: '%',
      pressure: 'hPa'
    };
    return units[type] || '';
  }
}

const simulator = new SensorSimulator('ws://localhost:8080');
simulator.start();
\`\`\`

### B∆∞·ªõc 2: WebSocket Server v·ªõi Data Processing

\`\`\`javascript
// server.js
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

// Store latest readings
const latestData = new Map();
const clients = new Set();

// Data smoothing (moving average)
class DataSmoother {
  constructor(windowSize = 5) {
    this.window = [];
    this.windowSize = windowSize;
  }
  
  smooth(value) {
    this.window.push(parseFloat(value));
    if (this.window.length > this.windowSize) {
      this.window.shift();
    }
    const sum = this.window.reduce((a, b) => a + b, 0);
    return (sum / this.window.length).toFixed(2);
  }
}

const smoothers = new Map();

wss.on('connection', (ws) => {
  console.log('Client connected');
  clients.add(ws);
  
  // G·ª≠i latest data cho client m·ªõi
  ws.send(JSON.stringify({
    type: 'init',
    data: Array.from(latestData.values())
  }));
  
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      // Apply smoothing
      if (!smoothers.has(data.sensorId)) {
        smoothers.set(data.sensorId, new DataSmoother());
      }
      const smoothed = smoothers.get(data.sensorId).smooth(data.value);
      
      // Add smoothed value
      data.smoothedValue = smoothed;
      
      // Check thresholds
      data.alert = checkThreshold(data);
      
      // Store latest
      latestData.set(data.sensorId, data);
      
      // Broadcast t·ªõi t·∫•t c·∫£ clients
      const broadcast = JSON.stringify({
        type: 'update',
        data: data
      });
      
      clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(broadcast);
        }
      });
      
      // Log to database (implementation t√πy b·∫°n)
      // saveToDatabase(data);
      
    } catch (error) {
      console.error('Error processing message:', error);
    }
  });
  
  ws.on('close', () => {
    clients.delete(ws);
    console.log('Client disconnected');
  });
});

function checkThreshold(data) {
  const thresholds = {
    temperature: { min: 18, max: 28 },
    humidity: { min: 30, max: 70 },
    pressure: { min: 995, max: 1015 }
  };
  
  const threshold = thresholds[data.type];
  if (!threshold) return false;
  
  const value = parseFloat(data.value);
  return value < threshold.min || value > threshold.max;
}

console.log('WebSocket server running on ws://localhost:8080');
\`\`\`

### B∆∞·ªõc 3: React Dashboard v·ªõi Real-time Charts

\`\`\`javascript
import React, { useState, useEffect, useRef } from 'react';

function SensorDashboard() {
  const [sensors, setSensors] = useState({});
  const [history, setHistory] = useState({});
  const [connected, setConnected] = useState(false);
  const ws = useRef(null);
  
  useEffect(() => {
    // Connect WebSocket
    ws.current = new WebSocket('ws://localhost:8080');
    
    ws.current.onopen = () => {
      setConnected(true);
      console.log('Dashboard connected');
    };
    
    ws.current.onmessage = (event) => {
      const message = JSON.parse(event.data);
      
      if (message.type === 'init') {
        // Initialize v·ªõi latest data
        const initial = {};
        message.data.forEach(sensor => {
          initial[sensor.sensorId] = sensor;
        });
        setSensors(initial);
      } else if (message.type === 'update') {
        const data = message.data;
        
        // Update sensor state
        setSensors(prev => ({
          ...prev,
          [data.sensorId]: data
        }));
        
        // Update history cho chart
        setHistory(prev => {
          const sensorHistory = prev[data.sensorId] || [];
          return {
            ...prev,
            [data.sensorId]: [
              ...sensorHistory.slice(-20), // Gi·ªØ 20 ƒëi·ªÉm cu·ªëi
              {
                timestamp: data.timestamp,
                value: parseFloat(data.smoothedValue)
              }
            ]
          };
        });
      }
    };
    
    ws.current.onclose = () => {
      setConnected(false);
      console.log('Disconnected');
    };
    
    return () => ws.current?.close();
  }, []);
  
  return (
    <div className="dashboard">
      <h1>Sensor Dashboard</h1>
      <div className="status">
        {connected ? 'üü¢ Connected' : 'üî¥ Disconnected'}
      </div>
      
      <div className="sensors-grid">
        {Object.values(sensors).map(sensor => (
          <SensorCard 
            key={sensor.sensorId} 
            sensor={sensor}
            history={history[sensor.sensorId] || []}
          />
        ))}
      </div>
    </div>
  );
}

function SensorCard({ sensor, history }) {
  return (
    <div className={\`sensor-card \${sensor.alert ? 'alert' : ''}\`}>
      <h3>{sensor.sensorId}</h3>
      <div className="value">
        <span className="number">{sensor.smoothedValue}</span>
        <span className="unit">{sensor.unit}</span>
      </div>
      {sensor.alert && (
        <div className="alert-badge">‚ö†Ô∏è Threshold exceeded!</div>
      )}
      <MiniChart data={history} />
    </div>
  );
}

function MiniChart({ data }) {
  if (data.length === 0) return null;
  
  const max = Math.max(...data.map(d => d.value));
  const min = Math.min(...data.map(d => d.value));
  
  return (
    <svg width="100%" height="60" className="mini-chart">
      <polyline
        points={data.map((d, i) => {
          const x = (i / (data.length - 1)) * 100;
          const y = 60 - ((d.value - min) / (max - min)) * 50;
          return \`\${x},\${y}\`;
        }).join(' ')}
        fill="none"
        stroke="#3b82f6"
        strokeWidth="2"
      />
    </svg>
  );
}

export default SensorDashboard;
\`\`\`

## üí° Optimization Techniques

**1. Data throttling**
\`\`\`javascript
let lastSent = 0;
const THROTTLE_MS = 1000;

if (Date.now() - lastSent > THROTTLE_MS) {
  ws.send(data);
  lastSent = Date.now();
}
\`\`\`

**2. Compression**
\`\`\`javascript
// G·ª≠i delta thay v√¨ full data
const delta = {
  id: sensor.id,
  v: value, // shortened keys
  t: Date.now()
};
\`\`\`

**3. Buffering**
\`\`\`javascript
// Buffer data v√† g·ª≠i batch
const buffer = [];
setInterval(() => {
  if (buffer.length > 0) {
    ws.send(JSON.stringify(buffer));
    buffer.length = 0;
  }
}, 5000);
\`\`\`

## üéì K·∫øt lu·∫≠n
B·∫°n ƒë√£ x√¢y d·ª±ng ƒë∆∞·ª£c m·ªôt h·ªá th·ªëng IoT realtime ho√†n ch·ªânh v·ªõi data pipeline, processing, v√† visualization. ƒê√¢y l√† n·ªÅn t·∫£ng ƒë·ªÉ scale l√™n c√°c h·ªá th·ªëng production v·ªõi thousands of sensors.

**Key components**:
- WebSocket cho bidirectional realtime communication
- Data smoothing ƒë·ªÉ gi·∫£m noise
- Threshold alerting cho monitoring
- Realtime charts cho visualization

**B√†i t·∫≠p n√¢ng cao**:
1. Th√™m database (InfluxDB/TimescaleDB) ƒë·ªÉ l∆∞u time series
2. Implement data aggregation (minute/hour averages)
3. Th√™m user authentication v√† multi-tenancy
4. Deploy l√™n cloud v·ªõi auto-scaling`
  },
  {
    id: 10,
    title: "Practical Tips: Debugging & Best Practices cho network code",
    excerpt: "Log, retry strategy, timeout handling v√† c√°ch vi·∫øt test cho code m·∫°ng.",
    datetime: "2025-10-21T16:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
L·∫≠p tr√¨nh m·∫°ng lu√¥n ƒë·∫ßy th·ª≠ th√°ch: connections drop, timeouts, network partitions... B√†i n√†y t·ªïng h·ª£p c√°c best practices v√† debugging techniques ƒë·ªÉ code c·ªßa b·∫°n robust v√† maintainable.

## üéØ M·ª•c ti√™u h·ªçc
- Implement proper error handling v√† logging
- Retry strategies v·ªõi exponential backoff
- Timeout management v√† circuit breaker pattern
- Testing network code v·ªõi mocks v√† integration tests

## üîß Best Practices

### 1. Proper Logging

**Structured logging (JavaScript)**
\`\`\`javascript
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

// Usage
logger.info('Connection established', {
  clientId: 'ABC123',
  ip: '192.168.1.100',
  timestamp: new Date()
});

logger.error('Connection failed', {
  error: err.message,
  stack: err.stack,
  clientId: 'ABC123'
});
\`\`\`

**Java logging (SLF4J + Logback)**
\`\`\`java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NetworkService {
  private static final Logger logger = LoggerFactory.getLogger(NetworkService.class);
  
  public void connect(String host, int port) {
    logger.info("Attempting connection to {}:{}", host, port);
    try {
      // Connection logic
      logger.info("Connection successful");
    } catch (IOException e) {
      logger.error("Connection failed: {}", e.getMessage(), e);
      throw new ConnectionException("Cannot connect", e);
    }
  }
}
\`\`\`

### 2. Retry Strategy v·ªõi Exponential Backoff

\`\`\`javascript
class RetryStrategy {
  constructor(options = {}) {
    this.maxRetries = options.maxRetries || 3;
    this.baseDelay = options.baseDelay || 1000;
    this.maxDelay = options.maxDelay || 30000;
    this.factor = options.factor || 2;
  }
  
  async execute(fn, context = 'operation') {
    let lastError;
    
    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {
      try {
        const result = await fn();
        
        if (attempt > 0) {
          console.log(\`\${context} succeeded after \${attempt} retries\`);
        }
        
        return result;
      } catch (error) {
        lastError = error;
        
        if (attempt === this.maxRetries) {
          console.error(\`\${context} failed after \${this.maxRetries} retries\`);
          throw error;
        }
        
        const delay = Math.min(
          this.baseDelay * Math.pow(this.factor, attempt),
          this.maxDelay
        );
        
        console.warn(
          \`\${context} failed (attempt \${attempt + 1}), \\
          retrying in \${delay}ms...\`,
          error.message
        );
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  }
}

// Usage
const retry = new RetryStrategy({ 
  maxRetries: 5,
  baseDelay: 1000,
  factor: 2
});

await retry.execute(async () => {
  const response = await fetch('https://api.example.com/data');
  if (!response.ok) throw new Error(\`HTTP \${response.status}\`);
  return await response.json();
}, 'API fetch');
\`\`\`

### 3. Timeout Management

\`\`\`javascript
// Wrapper v·ªõi timeout
function withTimeout(promise, timeoutMs) {
  return Promise.race([
    promise,
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), timeoutMs)
    )
  ]);
}

// Usage
try {
  const data = await withTimeout(
    fetch('https://slow-api.com/data'),
    5000 // 5 seconds
  );
} catch (error) {
  if (error.message === 'Timeout') {
    console.error('Request timed out');
  }
}

// V·ªõi AbortController (modern approach)
async function fetchWithTimeout(url, timeoutMs) {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const response = await fetch(url, { signal: controller.signal });
    return await response.json();
  } finally {
    clearTimeout(timeout);
  }
}
\`\`\`

### 4. Circuit Breaker Pattern

\`\`\`javascript
class CircuitBreaker {
  constructor(options = {}) {
    this.failureThreshold = options.failureThreshold || 5;
    this.resetTimeout = options.resetTimeout || 60000;
    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN
    this.failureCount = 0;
    this.nextAttempt = Date.now();
  }
  
  async execute(fn) {
    if (this.state === 'OPEN') {
      if (Date.now() < this.nextAttempt) {
        throw new Error('Circuit breaker is OPEN');
      }
      this.state = 'HALF_OPEN';
    }
    
    try {
      const result = await fn();
      this.onSuccess();
      return result;
    } catch (error) {
      this.onFailure();
      throw error;
    }
  }
  
  onSuccess() {
    this.failureCount = 0;
    this.state = 'CLOSED';
  }
  
  onFailure() {
    this.failureCount++;
    if (this.failureCount >= this.failureThreshold) {
      this.state = 'OPEN';
      this.nextAttempt = Date.now() + this.resetTimeout;
      console.warn(\`Circuit breaker opened, retry after \${this.resetTimeout}ms\`);
    }
  }
  
  getState() {
    return this.state;
  }
}

// Usage
const breaker = new CircuitBreaker({
  failureThreshold: 3,
  resetTimeout: 30000
});

async function callAPI() {
  try {
    return await breaker.execute(async () => {
      const response = await fetch('https://api.example.com/data');
      if (!response.ok) throw new Error('API Error');
      return await response.json();
    });
  } catch (error) {
    console.error('Request failed:', error.message);
    return null;
  }
}
\`\`\`

### 5. Testing Network Code

**Mock HTTP requests (Jest + node-fetch)**
\`\`\`javascript
// api.test.js
const fetch = require('node-fetch');
jest.mock('node-fetch');

describe('API Client', () => {
  beforeEach(() => {
    fetch.mockClear();
  });
  
  test('successful fetch', async () => {
    const mockData = { id: 1, name: 'Test' };
    fetch.mockResolvedValue({
      ok: true,
      json: async () => mockData
    });
    
    const result = await fetchUser(1);
    
    expect(fetch).toHaveBeenCalledWith('https://api.example.com/users/1');
    expect(result).toEqual(mockData);
  });
  
  test('handles network error', async () => {
    fetch.mockRejectedValue(new Error('Network error'));
    
    await expect(fetchUser(1)).rejects.toThrow('Network error');
  });
  
  test('handles HTTP error', async () => {
    fetch.mockResolvedValue({
      ok: false,
      status: 404
    });
    
    await expect(fetchUser(999)).rejects.toThrow();
  });
});
\`\`\`

**Integration test v·ªõi test server**
\`\`\`javascript
const express = require('express');

describe('Integration tests', () => {
  let server;
  let port;
  
  beforeAll((done) => {
    const app = express();
    app.get('/test', (req, res) => {
      res.json({ message: 'OK' });
    });
    
    server = app.listen(0, () => {
      port = server.address().port;
      done();
    });
  });
  
  afterAll((done) => {
    server.close(done);
  });
  
  test('real HTTP request', async () => {
    const response = await fetch(\`http://localhost:\${port}/test\`);
    const data = await response.json();
    
    expect(data.message).toBe('OK');
  });
});
\`\`\`

## üêõ Debugging Tools

### 1. Network inspection
\`\`\`bash
# tcpdump - capture packets
sudo tcpdump -i any port 8080 -w capture.pcap

# netstat - active connections
netstat -an | grep 8080

# curl v·ªõi verbose
curl -v https://api.example.com/data
\`\`\`

### 2. WebSocket debugging
\`\`\`javascript
const ws = new WebSocket('ws://localhost:8080');

// Log all events
ws.addEventListener('open', () => console.log('WS: OPEN'));
ws.addEventListener('close', (e) => console.log('WS: CLOSE', e.code, e.reason));
ws.addEventListener('error', (e) => console.error('WS: ERROR', e));
ws.addEventListener('message', (e) => console.log('WS: MESSAGE', e.data));
\`\`\`

### 3. Connection pooling monitoring
\`\`\`java
// HikariCP metrics
HikariDataSource ds = new HikariDataSource();
ds.setMetricRegistry(new MetricRegistry());

// Log pool stats
logger.info("Active connections: {}", ds.getHikariPoolMXBean().getActiveConnections());
logger.info("Idle connections: {}", ds.getHikariPoolMXBean().getIdleConnections());
\`\`\`

## üí° Performance Tips

**1. Connection reuse**
\`\`\`javascript
// ‚ùå Bad: T·∫°o connection m·ªõi m·ªói request
async function badFetch() {
  const http = require('http');
  const agent = new http.Agent();
  return fetch(url, { agent });
}

// ‚úÖ Good: Reuse connection pool
const agent = new http.Agent({
  keepAlive: true,
  maxSockets: 50
});

async function goodFetch() {
  return fetch(url, { agent });
}
\`\`\`

**2. Batch requests**
\`\`\`javascript
// Thay v√¨ 100 requests ri√™ng l·∫ª
const users = await Promise.all(
  ids.map(id => fetch(\`/users/\${id}\`))
);

// G·ª≠i 1 batch request
const users = await fetch('/users/batch', {
  method: 'POST',
  body: JSON.stringify({ ids })
});
\`\`\`

## üéì K·∫øt lu·∫≠n
Network programming ƒë√≤i h·ªèi x·ª≠ l√Ω nhi·ªÅu edge cases. V·ªõi proper logging, retry logic, timeouts, v√† testing, code c·ªßa b·∫°n s·∫Ω resilient v√† production-ready.

**Checklist cho production code**:
- ‚úÖ Structured logging v·ªõi correlation IDs
- ‚úÖ Exponential backoff cho retries
- ‚úÖ Timeouts cho t·∫•t c·∫£ network calls
- ‚úÖ Circuit breaker cho external dependencies
- ‚úÖ Comprehensive error handling
- ‚úÖ Unit v√† integration tests
- ‚úÖ Monitoring v√† alerting
- ‚úÖ Connection pooling v√† reuse

**B√†i t·∫≠p th·ª±c h√†nh**: T·∫°o m·ªôt network utility library v·ªõi t·∫•t c·∫£ patterns tr√™n, publish l√™n npm/Maven, v√† s·ª≠ d·ª•ng trong real project c·ªßa b·∫°n!`
  }
];

export default posts;
