const posts = [
  {
    id: 1,
    title: "Java Socket c∆° b·∫£n",
    excerpt: "Gi·ªõi thi·ªáu kh√°i ni·ªám socket trong Java, v√≠ d·ª• t·∫°o ServerSocket v√† Socket client, g·ª≠i/nh·∫≠n chu·ªói ƒë∆°n gi·∫£n.",
    datetime: "2025-10-10T09:00:00+07:00",
    body: '',
    bodyFile: '/posts/1.md',
  },
  {
    id: 2,
    title: "HTTP Request trong Java (HttpURLConnection & HttpClient)",
    excerpt: "So s√°nh c√°ch g·ª≠i HTTP request b·∫±ng HttpURLConnection v√† HttpClient, k√®m v√≠ d·ª• GET/POST.",
    datetime: "2025-10-12T14:30:00+07:00",
    body: '',
    bodyFile: '/posts/2.md',
  },
  {
    id: 3,
    title: "REST API v·ªõi Spring Boot",
    excerpt: "X√¢y d·ª±ng RESTful API nh·ªè: Controller, Service, Repository, v√† c√°ch test b·∫±ng Postman.",
    datetime: "2025-10-14T10:00:00+07:00",
    body: '',
    bodyFile: '/posts/1.md',

  },
  {
    id: 4,
    title: "Fetch API trong JavaScript",
    excerpt: "S·ª≠ d·ª•ng fetch ƒë·ªÉ g·ªçi REST API, x·ª≠ l√Ω JSON, v√† b·∫Øt l·ªói; v√≠ d·ª• th·ª±c t·∫ø v·ªõi async/await.",
    datetime: "2025-10-15T08:45:00+07:00",
    body: '',
    bodyFile: '/posts/2.md',

  },
  {
    id: 5,
    title: "WebSocket trong JS: Chat th·ªùi gian th·ª±c",
    excerpt: "Tri·ªÉn khai client WebSocket ƒë∆°n gi·∫£n, g·ª≠i/nh·∫≠n tin nh·∫Øn v√† x·ª≠ l√Ω reconnect.",
    datetime: "2025-10-16T11:20:00+07:00",
    body: '',
    bodyFile: '/posts/3.md',

  },
  {
    id: 6,
    title: "So s√°nh Java & JavaScript trong m·∫°ng",
    excerpt: "ƒêi·ªÉm m·∫°nh/ƒëi·ªÉm y·∫øu khi l√†m network programming: thread vs event loop, th∆∞ vi·ªán ph·ªï bi·∫øn.",
    datetime: "2025-10-17T09:00:00+07:00",
    body: '',
    bodyFile: '/posts/4.md',

  },
  {
    id: 7,
    title: "JSON v√† truy·ªÅn d·ªØ li·ªáu trong l·∫≠p tr√¨nh m·∫°ng",
    excerpt: "C√°ch serialize/deserialize JSON trong Java v√† JS, ƒë·ªãnh d·∫°ng h·ª£p l·ªá, v√† th·ªß thu·∫≠t an to√†n.",
    datetime: "2025-10-18T15:00:00+07:00",
    body: '',
    bodyFile: '/posts/5.md',

  },
  {
    id: 8,
    title: "MQTT cho IoT: T·ª´ l√Ω thuy·∫øt t·ªõi demo",
    excerpt: "Gi·ªõi thi·ªáu MQTT, thi·∫øt l·∫≠p Mosquitto broker, publish/subscribe b·∫±ng Python/JS.",
    datetime: "2025-10-19T10:30:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
MQTT (Message Queuing Telemetry Transport) l√† protocol nh·∫π, ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·∫∑c bi·ªát cho IoT devices v·ªõi bƒÉng th√¥ng th·∫•p v√† k·∫øt n·ªëi kh√¥ng ·ªïn ƒë·ªãnh. N√≥ ho√†n h·∫£o cho smart home, sensors, v√† industrial IoT.

## üéØ M·ª•c ti√™u h·ªçc
- Hi·ªÉu ki·∫øn tr√∫c MQTT: Broker, Publisher, Subscriber
- N·∫Øm kh√°i ni·ªám Topic, QoS, Retained Messages
- C√†i ƒë·∫∑t v√† c·∫•u h√¨nh Mosquitto broker
- Implement client v·ªõi Python v√† JavaScript

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: C√†i ƒë·∫∑t Mosquitto Broker

**Windows:**
\`\`\`bash
# Download t·ª´: https://mosquitto.org/download/
# Sau khi c√†i, ch·∫°y service
net start mosquitto
\`\`\`

**Linux/Mac:**
\`\`\`bash
# Ubuntu/Debian
sudo apt-get install mosquitto mosquitto-clients

# macOS
brew install mosquitto

# Start service
mosquitto -v
\`\`\`

### B∆∞·ªõc 2: Test v·ªõi Command Line

\`\`\`bash
# Terminal 1: Subscribe to topic
mosquitto_sub -h localhost -t sensors/temperature

# Terminal 2: Publish message
mosquitto_pub -h localhost -t sensors/temperature -m "25.5"
\`\`\`

### B∆∞·ªõc 3: Python Client (paho-mqtt)

**C√†i ƒë·∫∑t**
\`\`\`bash
pip install paho-mqtt
\`\`\`

**Publisher (g·ª≠i d·ªØ li·ªáu sensor)**
\`\`\`python
import paho.mqtt.client as mqtt
import time
import random

# Callback khi connect th√†nh c√¥ng
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT Broker!")
    else:
        print(f"Failed to connect, return code {rc}")

# T·∫°o client
client = mqtt.Client("TemperatureSensor")
client.on_connect = on_connect

# Connect t·ªõi broker
client.connect("localhost", 1883, 60)
client.loop_start()

# Publish data m·ªói 5 gi√¢y
try:
    while True:
        temperature = round(random.uniform(20.0, 30.0), 2)
        humidity = round(random.uniform(40.0, 60.0), 2)
        
        # Publish v·ªõi QoS 1
        client.publish("sensors/temperature", temperature, qos=1)
        client.publish("sensors/humidity", humidity, qos=1)
        
        print(f"Published: Temp={temperature}¬∞C, Humidity={humidity}%")
        time.sleep(5)
except KeyboardInterrupt:
    client.loop_stop()
    client.disconnect()
\`\`\`

**Subscriber (nh·∫≠n d·ªØ li·ªáu)**
\`\`\`python
import paho.mqtt.client as mqtt

def on_connect(client, userdata, flags, rc):
    print(f"Connected with result code {rc}")
    # Subscribe khi connect th√†nh c√¥ng
    client.subscribe("sensors/#")  # # = wildcard, nh·∫≠n t·∫•t c·∫£ subtopics

def on_message(client, userdata, msg):
    print(f"Topic: {msg.topic}")
    print(f"Message: {msg.payload.decode()}")
    print(f"QoS: {msg.qos}")
    print("---")

client = mqtt.Client("DataLogger")
client.on_connect = on_connect
client.on_message = on_message

client.connect("localhost", 1883, 60)

# Blocking call - ch·∫°y forever
client.loop_forever()
\`\`\`

### B∆∞·ªõc 4: JavaScript/Node.js Client

**C√†i ƒë·∫∑t**
\`\`\`bash
npm install mqtt
\`\`\`

**Publisher & Subscriber**
\`\`\`javascript
const mqtt = require('mqtt');

// Connect t·ªõi broker
const client = mqtt.connect('mqtt://localhost:1883', {
  clientId: 'WebClient',
  clean: true,
  connectTimeout: 4000
});

client.on('connect', () => {
  console.log('Connected to MQTT broker');
  
  // Subscribe topics
  client.subscribe('sensors/#', (err) => {
    if (!err) {
      console.log('Subscribed to sensors/*');
    }
  });
  
  // Publish test message
  setInterval(() => {
    const temp = (Math.random() * 10 + 20).toFixed(2);
    client.publish('sensors/temperature', temp, { qos: 1 });
    console.log(\`Published: \${temp}¬∞C\`);
  }, 10000);
});

client.on('message', (topic, message) => {
  console.log(\`[\${topic}] \${message.toString()}\`);
  
  // Parse v√† x·ª≠ l√Ω data
  if (topic === 'sensors/temperature') {
    const temp = parseFloat(message.toString());
    if (temp > 28) {
      console.log('‚ö†Ô∏è Temperature alert!');
    }
  }
});

client.on('error', (error) => {
  console.error('Connection error:', error);
});
\`\`\`

### B∆∞·ªõc 5: MQTT over WebSocket (Browser)

\`\`\`javascript
// S·ª≠ d·ª•ng CDN ho·∫∑c bundle v·ªõi webpack
// <script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script>

const client = mqtt.connect('ws://localhost:8080', {
  clientId: 'BrowserClient_' + Math.random().toString(16).substr(2, 8)
});

client.on('connect', () => {
  console.log('Connected via WebSocket');
  client.subscribe('sensors/temperature');
});

client.on('message', (topic, message) => {
  // Update UI
  document.getElementById('temperature').textContent = message.toString();
});
\`\`\`

## üìä MQTT Concepts

### QoS (Quality of Service) Levels

| QoS | T√™n | M√¥ t·∫£ | Use case |
|-----|-----|-------|----------|
| 0 | At most once | Fire and forget | Logging, non-critical data |
| 1 | At least once | Acknowledged delivery | Most common, sensor data |
| 2 | Exactly once | Guaranteed delivery | Financial, critical commands |

### Topic Structure
\`\`\`
home/livingroom/temperature
home/bedroom/humidity
factory/machine1/status
factory/machine1/alerts
\`\`\`

**Wildcards:**
- \`+\`: Single level wildcard (\`sensors/+/temperature\`)
- \`#\`: Multi level wildcard (\`sensors/#\`)

## üí° Best Practices

**1. Topic naming convention**
- D√πng lowercase
- Ph√¢n c·∫•p r√µ r√†ng: location/device/measurement
- Tr√°nh spaces v√† k√Ω t·ª± ƒë·∫∑c bi·ªát

**2. Security**
\`\`\`bash
# C·∫•u h√¨nh authentication trong mosquitto.conf
allow_anonymous false
password_file /etc/mosquitto/passwd

# T·∫°o user
mosquitto_passwd -c /etc/mosquitto/passwd username
\`\`\`

**3. Retained messages cho tr·∫°ng th√°i**
\`\`\`python
# Publish v·ªõi retained=True
client.publish("device/status", "online", retain=True)
# Client m·ªõi subscribe s·∫Ω nh·∫≠n ƒë∆∞·ª£c message n√†y ngay l·∫≠p t·ª©c
\`\`\`

## üéì K·∫øt lu·∫≠n
MQTT l√† protocol ho√†n h·∫£o cho IoT v·ªõi bandwidth th·∫•p, battery-powered devices, v√† unreliable networks. Mosquitto broker d·ªÖ setup v√† paho client libraries h·ªó tr·ª£ ƒëa n·ªÅn t·∫£ng.

**Key features**:
- Lightweight protocol, minimal overhead
- Publish/Subscribe pattern (decoupling)
- QoS levels cho reliability
- Retained messages v√† Last Will & Testament

**B√†i t·∫≠p th·ª±c h√†nh**:
1. X√¢y d·ª±ng h·ªá th·ªëng gi√°m s√°t nhi·ªát ƒë·ªô ph√≤ng v·ªõi ESP8266/Arduino
2. T·∫°o dashboard web realtime hi·ªÉn th·ªã sensor data
3. Implement alerting system khi gi√° tr·ªã v∆∞·ª£t ng∆∞·ª°ng
4. Deploy MQTT broker l√™n cloud (CloudMQTT, HiveMQ)`
  },
  {
    id: 9,
    title: "·ª®ng d·ª•ng th·ª±c t·∫ø: Gi√°m s√°t c·∫£m bi·∫øn qua WebSocket",
    excerpt: "Case study: thu th·∫≠p d·ªØ li·ªáu c·∫£m bi·∫øn, stream qua WebSocket v√† hi·ªÉn th·ªã dashboard.",
    datetime: "2025-10-20T13:10:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
B√†i n√†y l√† case study th·ª±c t·∫ø v·ªÅ vi·ªác x√¢y d·ª±ng h·ªá th·ªëng gi√°m s√°t c·∫£m bi·∫øn realtime, t·ª´ hardware ƒë·∫øn dashboard web. B·∫°n s·∫Ω h·ªçc c√°ch thi·∫øt k·∫ø ki·∫øn tr√∫c, x·ª≠ l√Ω data streaming, v√† visualization.

## üéØ M·ª•c ti√™u h·ªçc
- Thi·∫øt k·∫ø ki·∫øn tr√∫c IoT end-to-end
- Thu th·∫≠p v√† stream data t·ª´ sensors
- X·ª≠ l√Ω data pipeline v·ªõi WebSocket
- Hi·ªÉn th·ªã realtime dashboard v·ªõi charts

## üèóÔ∏è Ki·∫øn tr√∫c h·ªá th·ªëng

\`\`\`
[Sensors] ‚Üí [Gateway/MCU] ‚Üí [WebSocket Server] ‚Üí [Web Dashboard]
                              ‚Üì
                         [Database] (logging)
\`\`\`

## üîß H∆∞·ªõng d·∫´n th·ª±c hi·ªán

### B∆∞·ªõc 1: Sensor Data Generator (gi·∫£ l·∫≠p)

\`\`\`javascript
// sensor-simulator.js
const WebSocket = require('ws');

class SensorSimulator {
  constructor(wsUrl) {
    this.ws = new WebSocket(wsUrl);
    this.sensors = [
      { id: 'TEMP_01', type: 'temperature', min: 20, max: 30 },
      { id: 'HUM_01', type: 'humidity', min: 40, max: 70 },
      { id: 'PRES_01', type: 'pressure', min: 990, max: 1020 }
    ];
  }
  
  start() {
    this.ws.on('open', () => {
      console.log('Connected to server');
      this.sendData();
    });
  }
  
  sendData() {
    setInterval(() => {
      this.sensors.forEach(sensor => {
        const value = this.generateValue(sensor.min, sensor.max);
        const data = {
          sensorId: sensor.id,
          type: sensor.type,
          value: value,
          unit: this.getUnit(sensor.type),
          timestamp: new Date().toISOString()
        };
        
        this.ws.send(JSON.stringify(data));
        console.log(\`Sent: \${sensor.id} = \${value}\`);
      });
    }, 2000); // M·ªói 2 gi√¢y
  }
  
  generateValue(min, max) {
    return (Math.random() * (max - min) + min).toFixed(2);
  }
  
  getUnit(type) {
    const units = {
      temperature: '¬∞C',
      humidity: '%',
      pressure: 'hPa'
    };
    return units[type] || '';
  }
}

const simulator = new SensorSimulator('ws://localhost:8080');
simulator.start();
\`\`\`

### B∆∞·ªõc 2: WebSocket Server v·ªõi Data Processing

\`\`\`javascript
// server.js
const WebSocket = require('ws');
const wss = new WebSocket.Server({ port: 8080 });

// Store latest readings
const latestData = new Map();
const clients = new Set();

// Data smoothing (moving average)
class DataSmoother {
  constructor(windowSize = 5) {
    this.window = [];
    this.windowSize = windowSize;
  }
  
  smooth(value) {
    this.window.push(parseFloat(value));
    if (this.window.length > this.windowSize) {
      this.window.shift();
    }
    const sum = this.window.reduce((a, b) => a + b, 0);
    return (sum / this.window.length).toFixed(2);
  }
}

const smoothers = new Map();

wss.on('connection', (ws) => {
  console.log('Client connected');
  clients.add(ws);
  
  // G·ª≠i latest data cho client m·ªõi
  ws.send(JSON.stringify({
    type: 'init',
    data: Array.from(latestData.values())
  }));
  
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      
      // Apply smoothing
      if (!smoothers.has(data.sensorId)) {
        smoothers.set(data.sensorId, new DataSmoother());
      }
      const smoothed = smoothers.get(data.sensorId).smooth(data.value);
      
      // Add smoothed value
      data.smoothedValue = smoothed;
      
      // Check thresholds
      data.alert = checkThreshold(data);
      
      // Store latest
      latestData.set(data.sensorId, data);
      
      // Broadcast t·ªõi t·∫•t c·∫£ clients
      const broadcast = JSON.stringify({
        type: 'update',
        data: data
      });
      
      clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
          client.send(broadcast);
        }
      });
      
      // Log to database (implementation t√πy b·∫°n)
      // saveToDatabase(data);
      
    } catch (error) {
      console.error('Error processing message:', error);
    }
  });
  
  ws.on('close', () => {
    clients.delete(ws);
    console.log('Client disconnected');
  });
});

function checkThreshold(data) {
  const thresholds = {
    temperature: { min: 18, max: 28 },
    humidity: { min: 30, max: 70 },
    pressure: { min: 995, max: 1015 }
  };
  
  const threshold = thresholds[data.type];
  if (!threshold) return false;
  
  const value = parseFloat(data.value);
  return value < threshold.min || value > threshold.max;
}

console.log('WebSocket server running on ws://localhost:8080');
\`\`\`

### B∆∞·ªõc 3: React Dashboard v·ªõi Real-time Charts

\`\`\`javascript
import React, { useState, useEffect, useRef } from 'react';

function SensorDashboard() {
  const [sensors, setSensors] = useState({});
  const [history, setHistory] = useState({});
  const [connected, setConnected] = useState(false);
  const ws = useRef(null);
  
  useEffect(() => {
    // Connect WebSocket
    ws.current = new WebSocket('ws://localhost:8080');
    
    ws.current.onopen = () => {
      setConnected(true);
      console.log('Dashboard connected');
    };
    
    ws.current.onmessage = (event) => {
      const message = JSON.parse(event.data);
      
      if (message.type === 'init') {
        // Initialize v·ªõi latest data
        const initial = {};
        message.data.forEach(sensor => {
          initial[sensor.sensorId] = sensor;
        });
        setSensors(initial);
      } else if (message.type === 'update') {
        const data = message.data;
        
        // Update sensor state
        setSensors(prev => ({
          ...prev,
          [data.sensorId]: data
        }));
        
        // Update history cho chart
        setHistory(prev => {
          const sensorHistory = prev[data.sensorId] || [];
          return {
            ...prev,
            [data.sensorId]: [
              ...sensorHistory.slice(-20), // Gi·ªØ 20 ƒëi·ªÉm cu·ªëi
              {
                timestamp: data.timestamp,
                value: parseFloat(data.smoothedValue)
              }
            ]
          };
        });
      }
    };
    
    ws.current.onclose = () => {
      setConnected(false);
      console.log('Disconnected');
    };
    
    return () => ws.current?.close();
  }, []);
  
  return (
    <div className="dashboard">
      <h1>Sensor Dashboard</h1>
      <div className="status">
        {connected ? 'üü¢ Connected' : 'üî¥ Disconnected'}
      </div>
      
      <div className="sensors-grid">
        {Object.values(sensors).map(sensor => (
          <SensorCard 
            key={sensor.sensorId} 
            sensor={sensor}
            history={history[sensor.sensorId] || []}
          />
        ))}
      </div>
    </div>
  );
}

function SensorCard({ sensor, history }) {
  return (
    <div className={\`sensor-card \${sensor.alert ? 'alert' : ''}\`}>
      <h3>{sensor.sensorId}</h3>
      <div className="value">
        <span className="number">{sensor.smoothedValue}</span>
        <span className="unit">{sensor.unit}</span>
      </div>
      {sensor.alert && (
        <div className="alert-badge">‚ö†Ô∏è Threshold exceeded!</div>
      )}
      <MiniChart data={history} />
    </div>
  );
}

function MiniChart({ data }) {
  if (data.length === 0) return null;
  
  const max = Math.max(...data.map(d => d.value));
  const min = Math.min(...data.map(d => d.value));
  
  return (
    <svg width="100%" height="60" className="mini-chart">
      <polyline
        points={data.map((d, i) => {
          const x = (i / (data.length - 1)) * 100;
          const y = 60 - ((d.value - min) / (max - min)) * 50;
          return \`\${x},\${y}\`;
        }).join(' ')}
        fill="none"
        stroke="#3b82f6"
        strokeWidth="2"
      />
    </svg>
  );
}

export default SensorDashboard;
\`\`\`

## üí° Optimization Techniques

**1. Data throttling**
\`\`\`javascript
let lastSent = 0;
const THROTTLE_MS = 1000;

if (Date.now() - lastSent > THROTTLE_MS) {
  ws.send(data);
  lastSent = Date.now();
}
\`\`\`

**2. Compression**
\`\`\`javascript
// G·ª≠i delta thay v√¨ full data
const delta = {
  id: sensor.id,
  v: value, // shortened keys
  t: Date.now()
};
\`\`\`

**3. Buffering**
\`\`\`javascript
// Buffer data v√† g·ª≠i batch
const buffer = [];
setInterval(() => {
  if (buffer.length > 0) {
    ws.send(JSON.stringify(buffer));
    buffer.length = 0;
  }
}, 5000);
\`\`\`

## üéì K·∫øt lu·∫≠n
B·∫°n ƒë√£ x√¢y d·ª±ng ƒë∆∞·ª£c m·ªôt h·ªá th·ªëng IoT realtime ho√†n ch·ªânh v·ªõi data pipeline, processing, v√† visualization. ƒê√¢y l√† n·ªÅn t·∫£ng ƒë·ªÉ scale l√™n c√°c h·ªá th·ªëng production v·ªõi thousands of sensors.

**Key components**:
- WebSocket cho bidirectional realtime communication
- Data smoothing ƒë·ªÉ gi·∫£m noise
- Threshold alerting cho monitoring
- Realtime charts cho visualization

**B√†i t·∫≠p n√¢ng cao**:
1. Th√™m database (InfluxDB/TimescaleDB) ƒë·ªÉ l∆∞u time series
2. Implement data aggregation (minute/hour averages)
3. Th√™m user authentication v√† multi-tenancy
4. Deploy l√™n cloud v·ªõi auto-scaling`
  },
  {
    id: 10,
    title: "Practical Tips: Debugging & Best Practices cho network code",
    excerpt: "Log, retry strategy, timeout handling v√† c√°ch vi·∫øt test cho code m·∫°ng.",
    datetime: "2025-10-21T16:00:00+07:00",
    body: `## üìå Gi·ªõi thi·ªáu
L·∫≠p tr√¨nh m·∫°ng lu√¥n ƒë·∫ßy th·ª≠ th√°ch: connections drop, timeouts, network partitions... B√†i n√†y t·ªïng h·ª£p c√°c best practices v√† debugging techniques ƒë·ªÉ code c·ªßa b·∫°n robust v√† maintainable.

## üéØ M·ª•c ti√™u h·ªçc
- Implement proper error handling v√† logging
- Retry strategies v·ªõi exponential backoff
- Timeout management v√† circuit breaker pattern
- Testing network code v·ªõi mocks v√† integration tests

## üîß Best Practices

### 1. Proper Logging

**Structured logging (JavaScript)**
\`\`\`javascript
const winston = require('winston');

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json()
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' })
  ]
});

// Usage
logger.info('Connection established', {
  clientId: 'ABC123',
  ip: '192.168.1.100',
  timestamp: new Date()
});

logger.error('Connection failed', {
  error: err.message,
  stack: err.stack,
  clientId: 'ABC123'
});
\`\`\`

**Java logging (SLF4J + Logback)**
\`\`\`java
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NetworkService {
  private static final Logger logger = LoggerFactory.getLogger(NetworkService.class);
  
  public void connect(String host, int port) {
    logger.info("Attempting connection to {}:{}", host, port);
    try {
      // Connection logic
      logger.info("Connection successful");
    } catch (IOException e) {
      logger.error("Connection failed: {}", e.getMessage(), e);
      throw new ConnectionException("Cannot connect", e);
    }
  }
}
\`\`\`

### 2. Retry Strategy v·ªõi Exponential Backoff

\`\`\`javascript
class RetryStrategy {
  constructor(options = {}) {
    this.maxRetries = options.maxRetries || 3;
    this.baseDelay = options.baseDelay || 1000;
    this.maxDelay = options.maxDelay || 30000;
    this.factor = options.factor || 2;
  }
  
  async execute(fn, context = 'operation') {
    let lastError;
    
    for (let attempt = 0; attempt <= this.maxRetries; attempt++) {
      try {
        const result = await fn();
        
        if (attempt > 0) {
          console.log(\`\${context} succeeded after \${attempt} retries\`);
        }
        
        return result;
      } catch (error) {
        lastError = error;
        
        if (attempt === this.maxRetries) {
          console.error(\`\${context} failed after \${this.maxRetries} retries\`);
          throw error;
        }
        
        const delay = Math.min(
          this.baseDelay * Math.pow(this.factor, attempt),
          this.maxDelay
        );
        
        console.warn(
          \`\${context} failed (attempt \${attempt + 1}), \\
          retrying in \${delay}ms...\`,
          error.message
        );
        
        await new Promise(resolve => setTimeout(resolve, delay));
      }
    }
    
    throw lastError;
  }
}

// Usage
const retry = new RetryStrategy({ 
  maxRetries: 5,
  baseDelay: 1000,
  factor: 2
});

await retry.execute(async () => {
  const response = await fetch('https://api.example.com/data');
  if (!response.ok) throw new Error(\`HTTP \${response.status}\`);
  return await response.json();
}, 'API fetch');
\`\`\`

### 3. Timeout Management

\`\`\`javascript
// Wrapper v·ªõi timeout
function withTimeout(promise, timeoutMs) {
  return Promise.race([
    promise,
    new Promise((_, reject) => 
      setTimeout(() => reject(new Error('Timeout')), timeoutMs)
    )
  ]);
}

// Usage
try {
  const data = await withTimeout(
    fetch('https://slow-api.com/data'),
    5000 // 5 seconds
  );
} catch (error) {
  if (error.message === 'Timeout') {
    console.error('Request timed out');
  }
}

// V·ªõi AbortController (modern approach)
async function fetchWithTimeout(url, timeoutMs) {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), timeoutMs);
  
  try {
    const response = await fetch(url, { signal: controller.signal });
    return await response.json();
  } finally {
    clearTimeout(timeout);
  }
}
\`\`\`

### 4. Circuit Breaker Pattern

\`\`\`javascript
class CircuitBreaker {
  constructor(options = {}) {
    this.failureThreshold = options.failureThreshold || 5;
    this.resetTimeout = options.resetTimeout || 60000;
    this.state = 'CLOSED'; // CLOSED, OPEN, HALF_OPEN
    this.failureCount = 0;
    this.nextAttempt = Date.now();
  }
  
  async execute(fn) {
    if (this.state === 'OPEN') {
      if (Date.now() < this.nextAttempt) {
        throw new Error('Circuit breaker is OPEN');
      }
      this.state = 'HALF_OPEN';
    }
    
    try {
      const result = await fn();
      this.onSuccess();
      return result;
    } catch (error) {
      this.onFailure();
      throw error;
    }
  }
  
  onSuccess() {
    this.failureCount = 0;
    this.state = 'CLOSED';
  }
  
  onFailure() {
    this.failureCount++;
    if (this.failureCount >= this.failureThreshold) {
      this.state = 'OPEN';
      this.nextAttempt = Date.now() + this.resetTimeout;
      console.warn(\`Circuit breaker opened, retry after \${this.resetTimeout}ms\`);
    }
  }
  
  getState() {
    return this.state;
  }
}

// Usage
const breaker = new CircuitBreaker({
  failureThreshold: 3,
  resetTimeout: 30000
});

async function callAPI() {
  try {
    return await breaker.execute(async () => {
      const response = await fetch('https://api.example.com/data');
      if (!response.ok) throw new Error('API Error');
      return await response.json();
    });
  } catch (error) {
    console.error('Request failed:', error.message);
    return null;
  }
}
\`\`\`

### 5. Testing Network Code

**Mock HTTP requests (Jest + node-fetch)**
\`\`\`javascript
// api.test.js
const fetch = require('node-fetch');
jest.mock('node-fetch');

describe('API Client', () => {
  beforeEach(() => {
    fetch.mockClear();
  });
  
  test('successful fetch', async () => {
    const mockData = { id: 1, name: 'Test' };
    fetch.mockResolvedValue({
      ok: true,
      json: async () => mockData
    });
    
    const result = await fetchUser(1);
    
    expect(fetch).toHaveBeenCalledWith('https://api.example.com/users/1');
    expect(result).toEqual(mockData);
  });
  
  test('handles network error', async () => {
    fetch.mockRejectedValue(new Error('Network error'));
    
    await expect(fetchUser(1)).rejects.toThrow('Network error');
  });
  
  test('handles HTTP error', async () => {
    fetch.mockResolvedValue({
      ok: false,
      status: 404
    });
    
    await expect(fetchUser(999)).rejects.toThrow();
  });
});
\`\`\`

**Integration test v·ªõi test server**
\`\`\`javascript
const express = require('express');

describe('Integration tests', () => {
  let server;
  let port;
  
  beforeAll((done) => {
    const app = express();
    app.get('/test', (req, res) => {
      res.json({ message: 'OK' });
    });
    
    server = app.listen(0, () => {
      port = server.address().port;
      done();
    });
  });
  
  afterAll((done) => {
    server.close(done);
  });
  
  test('real HTTP request', async () => {
    const response = await fetch(\`http://localhost:\${port}/test\`);
    const data = await response.json();
    
    expect(data.message).toBe('OK');
  });
});
\`\`\`

## üêõ Debugging Tools

### 1. Network inspection
\`\`\`bash
# tcpdump - capture packets
sudo tcpdump -i any port 8080 -w capture.pcap

# netstat - active connections
netstat -an | grep 8080

# curl v·ªõi verbose
curl -v https://api.example.com/data
\`\`\`

### 2. WebSocket debugging
\`\`\`javascript
const ws = new WebSocket('ws://localhost:8080');

// Log all events
ws.addEventListener('open', () => console.log('WS: OPEN'));
ws.addEventListener('close', (e) => console.log('WS: CLOSE', e.code, e.reason));
ws.addEventListener('error', (e) => console.error('WS: ERROR', e));
ws.addEventListener('message', (e) => console.log('WS: MESSAGE', e.data));
\`\`\`

### 3. Connection pooling monitoring
\`\`\`java
// HikariCP metrics
HikariDataSource ds = new HikariDataSource();
ds.setMetricRegistry(new MetricRegistry());

// Log pool stats
logger.info("Active connections: {}", ds.getHikariPoolMXBean().getActiveConnections());
logger.info("Idle connections: {}", ds.getHikariPoolMXBean().getIdleConnections());
\`\`\`

## üí° Performance Tips

**1. Connection reuse**
\`\`\`javascript
// ‚ùå Bad: T·∫°o connection m·ªõi m·ªói request
async function badFetch() {
  const http = require('http');
  const agent = new http.Agent();
  return fetch(url, { agent });
}

// ‚úÖ Good: Reuse connection pool
const agent = new http.Agent({
  keepAlive: true,
  maxSockets: 50
});

async function goodFetch() {
  return fetch(url, { agent });
}
\`\`\`

**2. Batch requests**
\`\`\`javascript
// Thay v√¨ 100 requests ri√™ng l·∫ª
const users = await Promise.all(
  ids.map(id => fetch(\`/users/\${id}\`))
);

// G·ª≠i 1 batch request
const users = await fetch('/users/batch', {
  method: 'POST',
  body: JSON.stringify({ ids })
});
\`\`\`

## üéì K·∫øt lu·∫≠n
Network programming ƒë√≤i h·ªèi x·ª≠ l√Ω nhi·ªÅu edge cases. V·ªõi proper logging, retry logic, timeouts, v√† testing, code c·ªßa b·∫°n s·∫Ω resilient v√† production-ready.

**Checklist cho production code**:
- ‚úÖ Structured logging v·ªõi correlation IDs
- ‚úÖ Exponential backoff cho retries
- ‚úÖ Timeouts cho t·∫•t c·∫£ network calls
- ‚úÖ Circuit breaker cho external dependencies
- ‚úÖ Comprehensive error handling
- ‚úÖ Unit v√† integration tests
- ‚úÖ Monitoring v√† alerting
- ‚úÖ Connection pooling v√† reuse

**B√†i t·∫≠p th·ª±c h√†nh**: T·∫°o m·ªôt network utility library v·ªõi t·∫•t c·∫£ patterns tr√™n, publish l√™n npm/Maven, v√† s·ª≠ d·ª•ng trong real project c·ªßa b·∫°n!`
  }
];

export default posts;
